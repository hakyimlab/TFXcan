

```{r}
library(ggplot2)
library(ComplexUpset)
library(RcppAlgos)
library(parallel)
library(glue)
library(data.table)
library(tidyverse)
```
```{r}
project_dir <- '/lus/grand/projects/covid-ct/imlab/users/temi/projects/TFXcan/impact_pipeline'
#setwd(project_dir)
```

```{r}
output_dir <- glue('{project_dir}/explore_impact')
id <- 'kawakami'
TF <- 'FOXA1'
cell_line <- 'LuCaP'
```
```{r}
chip_file <- glue('{project_dir}/processed_data/impact_files/freedman/bedtools_intersected_regions/FOXA1_intersected_files.txt')
test_dt <- data.table::fread(chip_file)[1:5000, ]
test_dt[1:5, ]
```

```{r}
ind_names <- colnames(test_dt)[6:(ncol(test_dt)-1)]
```

```{r}
updt <- test_dt[, ..ind_names]
```

```{r}
nt <- colnames(updt)
tx <- table(nt)
```

```{r}
# nt_levels <- unlist(
#     lapply(seq_along(nt), function(i) combn(nt, i, FUN = list)),
#     recursive=F
# )

# nt_levels <- unlist(

#     parallel::mclapply(seq_along(nt), function(i){
#         RcppAlgos::comboGeneral(nt, m=i, FUN=list)
#     }, mc.cores=56), 

#     recursive=F
# )

nt_levels <- lapply(seq_along(nt), function(i){
    unlist(RcppAlgos::comboGeneral(nt, m=i, FUN=list), recursive=F)
})
```

```{r}
nt_levels <- unlist(nt_levels, recursive=F)
```

```{r}
# nt_levels <- list()
# for(i in 1:length(nt)){
#     print(i)
#     nt_levels[[i]] <- combn(nt, i, FUN=list)
# }
```


```{r}
temp_updt <- data.table(updt)
temp_updt[temp_updt == 0] <- NA
```

```{r}
dt_levels <- parallel::mclapply(nt_levels, function(each_level){
    #print(each_level)
    temp_dt <- temp_updt %>%
        dplyr::select(all_of(each_level))
    nrow(temp_dt[complete.cases(temp_dt), ])
}, mc.cores=48)
```

```{r}
names(dt_levels) <- unlist(parallel::mclapply(nt_levels, function(each_item){
    paste0(each_item, collapse='&')
}, mc.cores=48))
```

```{r}
dt_levels <- dt_levels |> unlist() |> as.data.frame()
dt_levels$combinations <- rownames(dt_levels)
colnames(dt_levels)[1] <- 'counts'
row.names(dt_levels) <- NULL
```

```{r}
subsets <- dt_levels$combinations
## Check if each subset mentions each symptom or not
symptom_mat <- map_dfc(subsets, str_detect, nt) %>%
    data.frame() %>%
    t() %>% # transpose the result, ugh
    tibble::as_tibble()
```

```{r}
colnames(symptom_mat) <- nt
symptom_mat$count <- dt_levels$count
#symptom_mat %>% print(n = nrow(symptom_mat))

indvs <- symptom_mat %>%
    tidyr::uncount(count) 
indvs
```

```{r}
upset(data = indvs, intersect = nt, 
      name="Symptom Groupings by Frequency. Total pool is 1,764 individuals.", 
      min_size = 0,
      width_ratio = 0.125)
```







