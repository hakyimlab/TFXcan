---
title: "Create ground truth for CWAS individuals"
author: "Temi"
date: 'Wed May 31 2023'
---

```{r import libraries}
setwd('/grand/TFXcan/imlab/users/temi/projects/TFXcan')

library(glue)
library(GenomicRanges)
library(reticulate)
library(R.utils)
library(data.table)
library(tidyverse)
```

```{r}
project_dir <- '/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan'
bedfiles_dir <- '/lus/grand/projects/TFXcan/imlab/data/baca_cwas/sorted_bed_hg38'
AR_predicted_motifs <- glue('{project_dir}/data/merged_motif_file.txt')
cwas_individuals_metadata <- data.table::fread(glue('{project_dir}/baca_cwas/metadata/samples_metadata.txt'))

cwas_individuals_metadata[1:5, ]
```

Read the predicted motifs and prepare as a granges file
```{r}
valid_chromosomes <- c(paste('chr', 1:22, sep=''), "chrX")

# === prepare the predicted motifs file 
genome_wide_predicted_motifs <- data.table::fread(AR_predicted_motifs) %>% 
    dplyr::select(chr=V2, start=V3, end=V4, strand=V5, score=V6) %>% 
    dplyr::filter(chr %in% valid_chromosomes)

# get threshold
threshold <- genome_wide_predicted_motifs %>% 
    dplyr::pull(score) %>% 
    quantile(0.05)
genome_wide_predicted_motifs <- genome_wide_predicted_motifs %>% 
dplyr::filter(score >= threshold)
# turn into GRanges
tf_motifs_granges <- with(genome_wide_predicted_motifs, GRanges(chr, IRanges(start,end), strand, score))
tf_motifs_granges <- tf_motifs_granges[seqnames(tf_motifs_granges) %in% valid_chromosomes]
tf_motifs_granges <- GenomicRanges::reduce(tf_motifs_granges)
tf_motifs_granges <- keepSeqlevels(tf_motifs_granges, paste0("chr", c(1:22, 'X')), pruning.mode="coarse")

tf_motifs_granges
```

Read each bedfile and overlap

```{r}
bfiles <- list.files(bedfiles_dir, full.names=T)
bfiles <- bfiles[file.info(bfiles)$size != 0]
bfiles
```

```{r}
overlapped_files <- purrr::map(.x=seq_along(bfiles), function(each_file_index){
    each_file <- bfiles[each_file_index]
    dt <- data.table::fread(each_file) %>%
        dplyr::distinct(V1, V2, .keep_all=T) %>%
        dplyr::select(chr=V1, start=V2, end=V3) %>% # select the chr, start and end columns
        with(., GRanges(chr, IRanges(start, end), strand='*'))
    
    dt <- dt[seqnames(dt) %in% valid_chromosomes]

    # find overlaps with the predicted motifs
    overlaps <- GenomicRanges::findOverlaps(query=dt, subject=tf_motifs_granges, type='any')

    # those with any overlaps are the positive ones
    positive_dt <- dt[queryHits(overlaps), ] %>% # because I only want the motifs
        as.data.frame() %>%
        dplyr::select(chr=seqnames, start, end) %>%
        dplyr::mutate(class = 1)
    
    # those with no overlaps are negative
    #negative_mt <- dt[-queryHits(overlaps), ]
    negative_dt <- dt[-queryHits(overlaps), ] %>% # because I only want the motifs
        as.data.frame() %>%
        dplyr::select(chr=seqnames, start, end) %>%
        dplyr::mutate(class = 0)

    cname <- basename(each_file) %>% gsub(pattern = '.sorted.bed', replacement = '', x = . )
    data <- rbind(positive_dt, negative_dt) %>% 
        data.table::setDT() %>%
        dplyr::group_by(chr, start, end) %>% 
        dplyr::summarise(class = n()) %>%
        dplyr::rename(!!quo_name(cname) := class) %>%
        tidyr::unite('locus', chr:end, sep = "_", remove = TRUE)
    return(data)

}, .progress=T)
```
```{r}
overlapped_files[[1]] |> head()
```


```{r}
dt_merged <- overlapped_files %>% 
    purrr::reduce(full_join, by = c('locus')) %>% 
    base::replace(is.na(.), 0)
dt_merged[1:5, 1:5]
```
```{r}
# write out
dt_merged %>% data.table::fwrite(file=glue('{project_dir}/baca_cwas/metadata/cwas_individuals_full_ground_truth.txt.gz'), quote=F, row.names=F, compress='gzip', sep='\t')
```

Read the cwas loci and turn into granges
```{r}
cwas_dt <- data.table::fread(glue('{project_dir}/baca_cwas/bed_files/baca_cwas_loci_hg38.bed'), col.names=c('chr', 'hg38_start', 'hg38_end', 'hg19_id'))
cwas_granges <- cwas_dt %>% with(., GRanges(chr, IRanges(start=hg38_start, end=hg38_end), strand='*'))
``` 

Turn the merged_dt to granges too
```{r}
dt_granges <- dt_merged %>% 
    dplyr::select(locus) %>% 
    tidyr::separate_wider_delim(cols='locus', delim='_', names = c("chr", "start", "end")) %>% 
    dplyr::mutate(start=as.numeric(start), end=as.numeric(end)) %>% 
    with(., GRanges(chr, IRanges(start=start, end=end), strand='*'))
dt_granges
```

# overlap with cwas loci
```{r}
overlaps <- GenomicRanges::findOverlaps(query=cwas_granges, subject=dt_granges, type='any')
overlaps
```
```{r}
dt_in_cwas <- dt_merged[subjectHits(overlaps), ]
cwas_hits <- cwas_dt[queryHits(overlaps), ] %>% 
    tidyr::unite('locus', chr:hg38_end, sep='_', remove=T) %>%
    dplyr::select(locus)
```

They are the same order so I can just cbind them
```{r}
cwas_complete <- cbind(cwas_locus=cwas_hits$locus, dt_in_cwas)
cwas_complete[1:10, 1:5]
```

To save resources, predictions should be done at the level of the CWAS peaks
```{r}
cwas_complete <- cwas_complete %>% 
    dplyr::select(-locus) %>% 
    dplyr::group_by(cwas_locus) %>%
    dplyr::summarize(across(everything(), list(sum)))

cwas_complete[1:5, 1:5]
```

```{r}
cwas_complete %>% data.table::fwrite(file=glue('{project_dir}/baca_cwas/metadata/cwas_ground_truth.AR_Prostate.txt'), quote=F, row.names=F, sep='\t')

cwas_complete[, 1] %>% as.data.frame() %>% data.table::fwrite(file=glue('{project_dir}/baca_cwas/metadata/cwas_predictors.AR_Prostate.txt'), quote=F, row.names=F, col.names=F, sep='\t')
```
