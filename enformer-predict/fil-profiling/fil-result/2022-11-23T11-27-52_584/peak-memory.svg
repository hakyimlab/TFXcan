<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1204" onload="init(evt)" viewBox="0 0 1200 1204" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno">
    <!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.-->
    <!--NOTES: -->
    <defs>
        <linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
            <stop stop-color="#eeeeee" offset="5%"/>
            <stop stop-color="#eeeeb0" offset="95%"/>
        </linearGradient>
    </defs>
    <style type="text/css">
text { font-family:"monospace"; font-size:16px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:21px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style>
    <script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 16;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script>
    <rect x="0" y="0" width="100%" height="1204" fill="url(#background)"/>
    <text id="title" x="50.0000%" y="32.00">Peak Tracked Memory Usage (49581.2 MiB)</text>
    <text id="subtitle" x="50.0000%" y="64.00">Made with the Fil profiler. <a href="https://pythonspeed.com/fil/" style="text-decoration: underline;" target="_parent">Try it on your code!</a></text>
    <text id="details" x="10" y="84.00"> </text>
    <text id="unzoom" class="hide" x="10" y="32.00">Reset Zoom</text>
    <text id="search" x="1090" y="32.00">Search</text>
    <text id="matched" x="1090" y="1191.00"> </text>
    <svg id="frames" x="10" width="1180" total_samples="51837952364">
        <g>
            <title>../scripts-3/enformer-predict-personalized.py:173 (main) (4,670,659,681 bytes, 9.01%)</title>
            <rect x="0.0736%" y="166" width="9.0101%" height="21" fill="rgb(255,205,205)" fg:x="38132834" fg:w="4670659681"/>
            <text x="0.3236%" y="179.50">../script..</text>
        </g>
        <g>
            <title>            if tf.config.list_physical_devices(&apos;GPU&apos;): (4,670,659,681 bytes, 9.01%)</title>
            <rect x="0.0736%" y="188" width="9.0101%" height="21" fill="rgb(255,205,205)" fg:x="38132834" fg:w="4670659681"/>
            <text x="0.3236%" y="201.50">        ..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/framework/config.py:423 (list_physical_devices) (4,670,659,681 bytes, 9.01%)</title>
            <rect x="0.0736%" y="210" width="9.0101%" height="21" fill="rgb(255,205,205)" fg:x="38132834" fg:w="4670659681"/>
            <text x="0.3236%" y="223.50">/home/tem..</text>
        </g>
        <g>
            <title>  return context.context().list_physical_devices(device_type) (4,670,659,681 bytes, 9.01%)</title>
            <rect x="0.0736%" y="232" width="9.0101%" height="21" fill="rgb(255,205,205)" fg:x="38132834" fg:w="4670659681"/>
            <text x="0.3236%" y="245.50">  return..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/eager/context.py:1476 (list_physical_devices) (4,670,659,681 bytes, 9.01%)</title>
            <rect x="0.0736%" y="254" width="9.0101%" height="21" fill="rgb(255,205,205)" fg:x="38132834" fg:w="4670659681"/>
            <text x="0.3236%" y="267.50">/home/tem..</text>
        </g>
        <g>
            <title>    self._initialize_physical_devices() (4,670,659,681 bytes, 9.01%)</title>
            <rect x="0.0736%" y="276" width="9.0101%" height="21" fill="rgb(255,205,205)" fg:x="38132834" fg:w="4670659681"/>
            <text x="0.3236%" y="289.50">    self..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/eager/context.py:1432 (_initialize_physical_devices) (4,670,659,681 bytes, 9.01%)</title>
            <rect x="0.0736%" y="298" width="9.0101%" height="21" fill="rgb(255,205,205)" fg:x="38132834" fg:w="4670659681"/>
            <text x="0.3236%" y="311.50">/home/tem..</text>
        </g>
        <g>
            <title>      devs = pywrap_tfe.TF_ListPhysicalDevices() (4,670,659,681 bytes, 9.01%)</title>
            <rect x="0.0736%" y="320" width="9.0101%" height="21" fill="rgb(255,205,205)" fg:x="38132834" fg:w="4670659681"/>
            <text x="0.3236%" y="333.50">      de..</text>
        </g>
        <g>
            <title>../scripts-3/enformer-predict-personalized.py:174 (main) (4,179,401,564 bytes, 8.06%)</title>
            <rect x="9.0837%" y="166" width="8.0624%" height="21" fill="rgb(255,207,207)" fg:x="4708792515" fg:w="4179401564"/>
            <text x="9.3337%" y="179.50">../scrip..</text>
        </g>
        <g>
            <title>                print(f&quot;[MEMORY] (GPU usage pre parsl) {each_individual} | batch {count + 1}: {tf.config.experimental.get_memory_info(&apos;GPU:0&apos;)[&apos;current&apos;]}&quot;) (4,179,401,564 bytes, 8.06%)</title>
            <rect x="9.0837%" y="188" width="8.0624%" height="21" fill="rgb(255,207,207)" fg:x="4708792515" fg:w="4179401564"/>
            <text x="9.3337%" y="201.50">       ..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/framework/config.py:576 (get_memory_info) (4,179,401,564 bytes, 8.06%)</title>
            <rect x="9.0837%" y="210" width="8.0624%" height="21" fill="rgb(255,207,207)" fg:x="4708792515" fg:w="4179401564"/>
            <text x="9.3337%" y="223.50">/home/te..</text>
        </g>
        <g>
            <title>  return context.context().get_memory_info(device) (4,179,401,564 bytes, 8.06%)</title>
            <rect x="9.0837%" y="232" width="8.0624%" height="21" fill="rgb(255,207,207)" fg:x="4708792515" fg:w="4179401564"/>
            <text x="9.3337%" y="245.50">  retur..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/eager/context.py:1612 (get_memory_info) (4,179,401,564 bytes, 8.06%)</title>
            <rect x="9.0837%" y="254" width="8.0624%" height="21" fill="rgb(255,207,207)" fg:x="4708792515" fg:w="4179401564"/>
            <text x="9.3337%" y="267.50">/home/te..</text>
        </g>
        <g>
            <title>    self.ensure_initialized() (4,179,401,564 bytes, 8.06%)</title>
            <rect x="9.0837%" y="276" width="8.0624%" height="21" fill="rgb(255,207,207)" fg:x="4708792515" fg:w="4179401564"/>
            <text x="9.3337%" y="289.50">    sel..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/eager/context.py:611 (ensure_initialized) (4,179,401,564 bytes, 8.06%)</title>
            <rect x="9.0837%" y="298" width="8.0624%" height="21" fill="rgb(255,207,207)" fg:x="4708792515" fg:w="4179401564"/>
            <text x="9.3337%" y="311.50">/home/te..</text>
        </g>
        <g>
            <title>        context_handle = pywrap_tfe.TFE_NewContext(opts) (4,179,401,564 bytes, 8.06%)</title>
            <rect x="9.0837%" y="320" width="8.0624%" height="21" fill="rgb(255,207,207)" fg:x="4708792515" fg:w="4179401564"/>
            <text x="9.3337%" y="333.50">       ..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:151 (__init__) (117,634,214 bytes, 0.23%)</title>
            <rect x="17.2067%" y="430" width="0.2269%" height="21" fill="rgb(255,242,242)" fg:x="8919615335" fg:w="117634214"/>
            <text x="17.4567%" y="443.50"></text>
        </g>
        <g>
            <title>        function_deserialization.load_function_def_library( (117,634,214 bytes, 0.23%)</title>
            <rect x="17.2067%" y="452" width="0.2269%" height="21" fill="rgb(255,242,242)" fg:x="8919615335" fg:w="117634214"/>
            <text x="17.4567%" y="465.50"></text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:283 (_load_all) (41,559,885,899 bytes, 80.17%)</title>
            <rect x="17.4337%" y="474" width="80.1727%" height="21" fill="rgb(255,115,115)" fg:x="9037249549" fg:w="41559885899"/>
            <text x="17.6837%" y="487.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load..</text>
        </g>
        <g>
            <title>    self._load_nodes() (41,559,885,899 bytes, 80.17%)</title>
            <rect x="17.4337%" y="496" width="80.1727%" height="21" fill="rgb(255,115,115)" fg:x="9037249549" fg:w="41559885899"/>
            <text x="17.6837%" y="509.50">    self._load_nodes()</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:481 (_load_nodes) (41,559,885,899 bytes, 80.17%)</title>
            <rect x="17.4337%" y="518" width="80.1727%" height="21" fill="rgb(255,115,115)" fg:x="9037249549" fg:w="41559885899"/>
            <text x="17.6837%" y="531.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load..</text>
        </g>
        <g>
            <title>        node, setter = self._recreate(proto, node_id, nodes) (41,559,885,899 bytes, 80.17%)</title>
            <rect x="17.4337%" y="540" width="80.1727%" height="21" fill="rgb(255,115,115)" fg:x="9037249549" fg:w="41559885899"/>
            <text x="17.6837%" y="553.50">        node, setter = self._recreate(proto, node_id, nodes)</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:597 (_recreate) (41,559,885,899 bytes, 80.17%)</title>
            <rect x="17.4337%" y="562" width="80.1727%" height="21" fill="rgb(255,115,115)" fg:x="9037249549" fg:w="41559885899"/>
            <text x="17.6837%" y="575.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load..</text>
        </g>
        <g>
            <title>      return self._recreate_default(proto, node_id, dependencies) (41,559,885,899 bytes, 80.17%)</title>
            <rect x="17.4337%" y="584" width="80.1727%" height="21" fill="rgb(255,115,115)" fg:x="9037249549" fg:w="41559885899"/>
            <text x="17.6837%" y="597.50">      return self._recreate_default(proto, node_id, dependencies)</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:616 (_recreate_default) (41,559,885,899 bytes, 80.17%)</title>
            <rect x="17.4337%" y="606" width="80.1727%" height="21" fill="rgb(255,115,115)" fg:x="9037249549" fg:w="41559885899"/>
            <text x="17.6837%" y="619.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load..</text>
        </g>
        <g>
            <title>    return factory[kind]() (41,559,885,899 bytes, 80.17%)</title>
            <rect x="17.4337%" y="628" width="80.1727%" height="21" fill="rgb(255,115,115)" fg:x="9037249549" fg:w="41559885899"/>
            <text x="17.6837%" y="641.50">    return factory[kind]()</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:608 (&lt;lambda&gt;) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="650" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="663.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load..</text>
        </g>
        <g>
            <title>        &quot;variable&quot;: lambda: self._recreate_variable(proto.variable), (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="672" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="685.50">        &quot;variable&quot;: lambda: self._recreate_variable(proto.variable),</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:671 (_recreate_variable) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="694" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="707.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load..</text>
        </g>
        <g>
            <title>      return variables.Variable( (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="716" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="729.50">      return variables.Variable(</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:150 (error_handler) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="738" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="751.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/util/traceback_u..</text>
        </g>
        <g>
            <title>      return fn(*args, **kwargs) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="760" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="773.50">      return fn(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/variables.py:266 (__call__) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="782" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="795.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/variables.py..</text>
        </g>
        <g>
            <title>      return cls._variable_v2_call(*args, **kwargs) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="804" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="817.50">      return cls._variable_v2_call(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/variables.py:247 (_variable_v2_call) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="826" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="839.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/variables.py..</text>
        </g>
        <g>
            <title>    return previous_getter( (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="848" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="861.50">    return previous_getter(</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/variables.py:64 (getter) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="870" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="883.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/variables.py..</text>
        </g>
        <g>
            <title>    return captured_getter(captured_previous, **kwargs) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="892" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="905.50">    return captured_getter(captured_previous, **kwargs)</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:663 (uninitialized_variable_creator) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="914" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="927.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load..</text>
        </g>
        <g>
            <title>      return resource_variable_ops.UninitializedVariable(**kwargs) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="936" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="949.50">      return resource_variable_ops.UninitializedVariable(**kwargs)</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:150 (error_handler) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="958" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="971.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/util/traceback_u..</text>
        </g>
        <g>
            <title>      return fn(*args, **kwargs) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="980" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="993.50">      return fn(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/variables.py:268 (__call__) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="1002" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="1015.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/variables.py..</text>
        </g>
        <g>
            <title>      return super(VariableMetaclass, cls).__call__(*args, **kwargs) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="1024" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="1037.50">      return super(VariableMetaclass, cls).__call__(*args, **kwargs)</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/resource_variable_ops.py:2033 (__init__) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="1046" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="1059.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/resource_var..</text>
        </g>
        <g>
            <title>        handle = _variable_handle_from_shape_and_dtype( (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="1068" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="1081.50">        handle = _variable_handle_from_shape_and_dtype(</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/resource_variable_ops.py:161 (_variable_handle_from_shape_and_dtype) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="1090" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="1103.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/resource_var..</text>
        </g>
        <g>
            <title>  handle = gen_resource_variable_ops.var_handle_op( (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="1112" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="1125.50">  handle = gen_resource_variable_ops.var_handle_op(</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/gen_resource_variable_ops.py:1181 (var_handle_op) (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="1134" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="1147.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/gen_resource..</text>
        </g>
        <g>
            <title>      _result = pywrap_tfe.TFE_Py_FastPathExecute( (41,558,777,563 bytes, 80.17%)</title>
            <rect x="17.4358%" y="1156" width="80.1706%" height="21" fill="rgb(255,115,115)" fg:x="9038357885" fg:w="41558777563"/>
            <text x="17.6858%" y="1169.50">      _result = pywrap_tfe.TFE_Py_FastPathExecute(</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:186 (__init__) (41,560,252,859 bytes, 80.17%)</title>
            <rect x="17.4337%" y="430" width="80.1734%" height="21" fill="rgb(255,115,115)" fg:x="9037249549" fg:w="41560252859"/>
            <text x="17.6837%" y="443.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load..</text>
        </g>
        <g>
            <title>    self._load_all() (41,560,252,859 bytes, 80.17%)</title>
            <rect x="17.4337%" y="452" width="80.1734%" height="21" fill="rgb(255,115,115)" fg:x="9037249549" fg:w="41560252859"/>
            <text x="17.6837%" y="465.50">    self._load_all()</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/training/saving/functional_saver.py:105 (restore) (1,006,330,697 bytes, 1.94%)</title>
            <rect x="97.6098%" y="782" width="1.9413%" height="21" fill="rgb(255,229,229)" fg:x="50598906468" fg:w="1006330697"/>
            <text x="97.8598%" y="795.50"></text>
        </g>
        <g>
            <title>      restored_tensors = io_ops.restore_v2( (1,006,330,697 bytes, 1.94%)</title>
            <rect x="97.6098%" y="804" width="1.9413%" height="21" fill="rgb(255,229,229)" fg:x="50598906468" fg:w="1006330697"/>
            <text x="97.8598%" y="817.50"></text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py:1490 (restore_v2) (1,006,330,697 bytes, 1.94%)</title>
            <rect x="97.6098%" y="826" width="1.9413%" height="21" fill="rgb(255,229,229)" fg:x="50598906468" fg:w="1006330697"/>
            <text x="97.8598%" y="839.50"></text>
        </g>
        <g>
            <title>      return restore_v2_eager_fallback( (1,006,330,697 bytes, 1.94%)</title>
            <rect x="97.6098%" y="848" width="1.9413%" height="21" fill="rgb(255,229,229)" fg:x="50598906468" fg:w="1006330697"/>
            <text x="97.8598%" y="861.50"></text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py:1529 (restore_v2_eager_fallback) (1,006,330,697 bytes, 1.94%)</title>
            <rect x="97.6098%" y="870" width="1.9413%" height="21" fill="rgb(255,229,229)" fg:x="50598906468" fg:w="1006330697"/>
            <text x="97.8598%" y="883.50"></text>
        </g>
        <g>
            <title>  _result = _execute.execute(b&quot;RestoreV2&quot;, len(dtypes), inputs=_inputs_flat, (1,006,330,697 bytes, 1.94%)</title>
            <rect x="97.6098%" y="892" width="1.9413%" height="21" fill="rgb(255,229,229)" fg:x="50598906468" fg:w="1006330697"/>
            <text x="97.8598%" y="905.50"></text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/eager/execute.py:54 (quick_execute) (1,006,330,697 bytes, 1.94%)</title>
            <rect x="97.6098%" y="914" width="1.9413%" height="21" fill="rgb(255,229,229)" fg:x="50598906468" fg:w="1006330697"/>
            <text x="97.8598%" y="927.50"></text>
        </g>
        <g>
            <title>    tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name, (1,006,330,697 bytes, 1.94%)</title>
            <rect x="97.6098%" y="936" width="1.9413%" height="21" fill="rgb(255,229,229)" fg:x="50598906468" fg:w="1006330697"/>
            <text x="97.8598%" y="949.50"></text>
        </g>
        <g>
            <title>&lt;string&gt;:151 (enformer_predict) (42,920,981,532 bytes, 82.80%)</title>
            <rect x="17.1848%" y="298" width="82.7984%" height="21" fill="rgb(255,113,113)" fg:x="8908243217" fg:w="42920981532"/>
            <text x="17.4348%" y="311.50">&lt;string&gt;:151 (enformer_predict)</text>
        </g>
        <g>
            <title> (42,920,981,532 bytes, 82.80%)</title>
            <rect x="17.1848%" y="320" width="82.7984%" height="21" fill="rgb(255,113,113)" fg:x="8908243217" fg:w="42920981532"/>
            <text x="17.4348%" y="333.50"></text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:782 (load) (42,920,981,532 bytes, 82.80%)</title>
            <rect x="17.1848%" y="342" width="82.7984%" height="21" fill="rgb(255,113,113)" fg:x="8908243217" fg:w="42920981532"/>
            <text x="17.4348%" y="355.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:..</text>
        </g>
        <g>
            <title>  result = load_partial(export_dir, None, tags, options)[&quot;root&quot;] (42,920,981,532 bytes, 82.80%)</title>
            <rect x="17.1848%" y="364" width="82.7984%" height="21" fill="rgb(255,113,113)" fg:x="8908243217" fg:w="42920981532"/>
            <text x="17.4348%" y="377.50">  result = load_partial(export_dir, None, tags, options)[&quot;root&quot;]</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:912 (load_partial) (42,909,609,414 bytes, 82.78%)</title>
            <rect x="17.2067%" y="386" width="82.7764%" height="21" fill="rgb(255,113,113)" fg:x="8919615335" fg:w="42909609414"/>
            <text x="17.4567%" y="399.50">/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:..</text>
        </g>
        <g>
            <title>        loader = Loader(object_graph_proto, saved_model_proto, export_dir, (42,909,609,414 bytes, 82.78%)</title>
            <rect x="17.2067%" y="408" width="82.7764%" height="21" fill="rgb(255,113,113)" fg:x="8919615335" fg:w="42909609414"/>
            <text x="17.4567%" y="421.50">        loader = Loader(object_graph_proto, saved_model_proto, export_dir,</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:189 (__init__) (1,231,722,341 bytes, 2.38%)</title>
            <rect x="97.6071%" y="430" width="2.3761%" height="21" fill="rgb(255,226,226)" fg:x="50597502408" fg:w="1231722341"/>
            <text x="97.8571%" y="443.50">/..</text>
        </g>
        <g>
            <title>      self._restore_checkpoint() (1,231,722,341 bytes, 2.38%)</title>
            <rect x="97.6071%" y="452" width="2.3761%" height="21" fill="rgb(255,226,226)" fg:x="50597502408" fg:w="1231722341"/>
            <text x="97.8571%" y="465.50">..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/saved_model/load.py:507 (_restore_checkpoint) (1,231,722,341 bytes, 2.38%)</title>
            <rect x="97.6071%" y="474" width="2.3761%" height="21" fill="rgb(255,226,226)" fg:x="50597502408" fg:w="1231722341"/>
            <text x="97.8571%" y="487.50">/..</text>
        </g>
        <g>
            <title>      load_status = saver.restore(variables_path, self._checkpoint_options) (1,231,722,341 bytes, 2.38%)</title>
            <rect x="97.6071%" y="496" width="2.3761%" height="21" fill="rgb(255,226,226)" fg:x="50597502408" fg:w="1231722341"/>
            <text x="97.8571%" y="509.50">..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/training/tracking/util.py:1469 (restore) (1,230,318,281 bytes, 2.37%)</title>
            <rect x="97.6098%" y="518" width="2.3734%" height="21" fill="rgb(255,226,226)" fg:x="50598906468" fg:w="1230318281"/>
            <text x="97.8598%" y="531.50">/..</text>
        </g>
        <g>
            <title>        checkpoint=checkpoint, proto_id=0).restore(self._graph_view.root) (1,230,318,281 bytes, 2.37%)</title>
            <rect x="97.6098%" y="540" width="2.3734%" height="21" fill="rgb(255,226,226)" fg:x="50598906468" fg:w="1230318281"/>
            <text x="97.8598%" y="553.50">..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/training/tracking/base.py:295 (restore) (1,230,318,281 bytes, 2.37%)</title>
            <rect x="97.6098%" y="562" width="2.3734%" height="21" fill="rgb(255,226,226)" fg:x="50598906468" fg:w="1230318281"/>
            <text x="97.8598%" y="575.50">/..</text>
        </g>
        <g>
            <title>        restore_ops = trackable._restore_from_checkpoint_position(self)  # pylint: disable=protected-access (1,230,318,281 bytes, 2.37%)</title>
            <rect x="97.6098%" y="584" width="2.3734%" height="21" fill="rgb(255,226,226)" fg:x="50598906468" fg:w="1230318281"/>
            <text x="97.8598%" y="597.50">..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/training/tracking/base.py:1060 (_restore_from_checkpoint_position) (1,230,318,281 bytes, 2.37%)</title>
            <rect x="97.6098%" y="606" width="2.3734%" height="21" fill="rgb(255,226,226)" fg:x="50598906468" fg:w="1230318281"/>
            <text x="97.8598%" y="619.50">/..</text>
        </g>
        <g>
            <title>        current_position.checkpoint.restore_saveables(tensor_saveables, (1,230,318,281 bytes, 2.37%)</title>
            <rect x="97.6098%" y="628" width="2.3734%" height="21" fill="rgb(255,226,226)" fg:x="50598906468" fg:w="1230318281"/>
            <text x="97.8598%" y="641.50">..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/training/tracking/util.py:351 (restore_saveables) (1,230,318,281 bytes, 2.37%)</title>
            <rect x="97.6098%" y="650" width="2.3734%" height="21" fill="rgb(255,226,226)" fg:x="50598906468" fg:w="1230318281"/>
            <text x="97.8598%" y="663.50">/..</text>
        </g>
        <g>
            <title>          registered_savers).restore(self.save_path_tensor, self.options) (1,230,318,281 bytes, 2.37%)</title>
            <rect x="97.6098%" y="672" width="2.3734%" height="21" fill="rgb(255,226,226)" fg:x="50598906468" fg:w="1230318281"/>
            <text x="97.8598%" y="685.50">..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/training/saving/functional_saver.py:415 (restore) (1,230,318,281 bytes, 2.37%)</title>
            <rect x="97.6098%" y="694" width="2.3734%" height="21" fill="rgb(255,226,226)" fg:x="50598906468" fg:w="1230318281"/>
            <text x="97.8598%" y="707.50">/..</text>
        </g>
        <g>
            <title>      restore_ops = restore_fn() (1,230,318,281 bytes, 2.37%)</title>
            <rect x="97.6098%" y="716" width="2.3734%" height="21" fill="rgb(255,226,226)" fg:x="50598906468" fg:w="1230318281"/>
            <text x="97.8598%" y="729.50">..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/training/saving/functional_saver.py:398 (restore_fn) (1,230,318,281 bytes, 2.37%)</title>
            <rect x="97.6098%" y="738" width="2.3734%" height="21" fill="rgb(255,226,226)" fg:x="50598906468" fg:w="1230318281"/>
            <text x="97.8598%" y="751.50">/..</text>
        </g>
        <g>
            <title>          restore_ops.update(saver.restore(file_prefix, options)) (1,230,318,281 bytes, 2.37%)</title>
            <rect x="97.6098%" y="760" width="2.3734%" height="21" fill="rgb(255,226,226)" fg:x="50598906468" fg:w="1230318281"/>
            <text x="97.8598%" y="773.50">..</text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/training/saving/functional_saver.py:112 (restore) (223,987,584 bytes, 0.43%)</title>
            <rect x="99.5511%" y="782" width="0.4321%" height="21" fill="rgb(255,240,240)" fg:x="51605237165" fg:w="223987584"/>
            <text x="99.8011%" y="795.50"></text>
        </g>
        <g>
            <title>      restore_ops[saveable.name] = saveable.restore( (223,987,584 bytes, 0.43%)</title>
            <rect x="99.5511%" y="804" width="0.4321%" height="21" fill="rgb(255,240,240)" fg:x="51605237165" fg:w="223987584"/>
            <text x="99.8011%" y="817.50"></text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/training/saving/saveable_object_util.py:128 (restore) (223,987,584 bytes, 0.43%)</title>
            <rect x="99.5511%" y="826" width="0.4321%" height="21" fill="rgb(255,240,240)" fg:x="51605237165" fg:w="223987584"/>
            <text x="99.8011%" y="839.50"></text>
        </g>
        <g>
            <title>      restored_tensor = array_ops.identity(restored_tensor) (223,987,584 bytes, 0.43%)</title>
            <rect x="99.5511%" y="848" width="0.4321%" height="21" fill="rgb(255,240,240)" fg:x="51605237165" fg:w="223987584"/>
            <text x="99.8011%" y="861.50"></text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:150 (error_handler) (223,987,584 bytes, 0.43%)</title>
            <rect x="99.5511%" y="870" width="0.4321%" height="21" fill="rgb(255,240,240)" fg:x="51605237165" fg:w="223987584"/>
            <text x="99.8011%" y="883.50"></text>
        </g>
        <g>
            <title>      return fn(*args, **kwargs) (223,987,584 bytes, 0.43%)</title>
            <rect x="99.5511%" y="892" width="0.4321%" height="21" fill="rgb(255,240,240)" fg:x="51605237165" fg:w="223987584"/>
            <text x="99.8011%" y="905.50"></text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1082 (op_dispatch_handler) (223,987,584 bytes, 0.43%)</title>
            <rect x="99.5511%" y="914" width="0.4321%" height="21" fill="rgb(255,240,240)" fg:x="51605237165" fg:w="223987584"/>
            <text x="99.8011%" y="927.50"></text>
        </g>
        <g>
            <title>        return dispatch_target(*args, **kwargs) (223,987,584 bytes, 0.43%)</title>
            <rect x="99.5511%" y="936" width="0.4321%" height="21" fill="rgb(255,240,240)" fg:x="51605237165" fg:w="223987584"/>
            <text x="99.8011%" y="949.50"></text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py:295 (identity) (223,987,584 bytes, 0.43%)</title>
            <rect x="99.5511%" y="958" width="0.4321%" height="21" fill="rgb(255,240,240)" fg:x="51605237165" fg:w="223987584"/>
            <text x="99.8011%" y="971.50"></text>
        </g>
        <g>
            <title>  ret = gen_array_ops.identity(input, name=name) (223,987,584 bytes, 0.43%)</title>
            <rect x="99.5511%" y="980" width="0.4321%" height="21" fill="rgb(255,240,240)" fg:x="51605237165" fg:w="223987584"/>
            <text x="99.8011%" y="993.50"></text>
        </g>
        <g>
            <title>/home/temi/miniconda3/envs/dl-tools/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py:4064 (identity) (223,987,584 bytes, 0.43%)</title>
            <rect x="99.5511%" y="1002" width="0.4321%" height="21" fill="rgb(255,240,240)" fg:x="51605237165" fg:w="223987584"/>
            <text x="99.8011%" y="1015.50"></text>
        </g>
        <g>
            <title>      _result = pywrap_tfe.TFE_Py_FastPathExecute( (223,987,584 bytes, 0.43%)</title>
            <rect x="99.5511%" y="1024" width="0.4321%" height="21" fill="rgb(255,240,240)" fg:x="51605237165" fg:w="223987584"/>
            <text x="99.8011%" y="1037.50"></text>
        </g>
        <g>
            <title>../scripts-3/enformer-predict-personalized.py:214 (&lt;module&gt;) (51,800,730,292 bytes, 99.93%)</title>
            <rect x="0.0693%" y="122" width="99.9282%" height="21" fill="rgb(255,100,100)" fg:x="35947319" fg:w="51800730292"/>
            <text x="0.3193%" y="135.50">../scripts-3/enformer-predict-personalized.py:214 (&lt;module&gt;)</text>
        </g>
        <g>
            <title>    main() (51,800,730,292 bytes, 99.93%)</title>
            <rect x="0.0693%" y="144" width="99.9282%" height="21" fill="rgb(255,100,100)" fg:x="35947319" fg:w="51800730292"/>
            <text x="0.3193%" y="157.50">    main()</text>
        </g>
        <g>
            <title>../scripts-3/enformer-predict-personalized.py:183 (main) (42,948,483,532 bytes, 82.85%)</title>
            <rect x="17.1461%" y="166" width="82.8514%" height="21" fill="rgb(255,113,113)" fg:x="8888194079" fg:w="42948483532"/>
            <text x="17.3961%" y="179.50">../scripts-3/enformer-predict-personalized.py:183 (main)</text>
        </g>
        <g>
            <title>                query_futures = [run_single_predictions(region=query, individual=each_individual, vcf_func=make_cyvcf_object, script_path=script_path, fasta_func=get_fastaExtractor, output_dir=output_dir, logfile=logfile, model_path=model_path, model_func=None, logfile_path=logfile_path) for query in tqdm.tqdm(check_result, desc=f&apos;[INFO] Creating futures for batch {count + 1} of {math.ceil(len(list_of_regions)/batch_size)}&apos;)] (42,948,483,532 bytes, 82.85%)</title>
            <rect x="17.1461%" y="188" width="82.8514%" height="21" fill="rgb(255,113,113)" fg:x="8888194079" fg:w="42948483532"/>
            <text x="17.3961%" y="201.50">                query_futures = [run_single_predictions(region=query, individual=each_individual, vcf_..</text>
        </g>
        <g>
            <title>../scripts-3/enformer-predict-personalized.py:183 (&lt;listcomp&gt;) (42,948,483,532 bytes, 82.85%)</title>
            <rect x="17.1461%" y="210" width="82.8514%" height="21" fill="rgb(255,113,113)" fg:x="8888194079" fg:w="42948483532"/>
            <text x="17.3961%" y="223.50">../scripts-3/enformer-predict-personalized.py:183 (&lt;listcomp&gt;)</text>
        </g>
        <g>
            <title>                query_futures = [run_single_predictions(region=query, individual=each_individual, vcf_func=make_cyvcf_object, script_path=script_path, fasta_func=get_fastaExtractor, output_dir=output_dir, logfile=logfile, model_path=model_path, model_func=None, logfile_path=logfile_path) for query in tqdm.tqdm(check_result, desc=f&apos;[INFO] Creating futures for batch {count + 1} of {math.ceil(len(list_of_regions)/batch_size)}&apos;)] (42,948,483,532 bytes, 82.85%)</title>
            <rect x="17.1461%" y="232" width="82.8514%" height="21" fill="rgb(255,113,113)" fg:x="8888194079" fg:w="42948483532"/>
            <text x="17.3961%" y="245.50">                query_futures = [run_single_predictions(region=query, individual=each_individual, vcf_..</text>
        </g>
        <g>
            <title>../scripts-3/enformer-predict-personalized.py:70 (run_single_predictions) (42,928,434,394 bytes, 82.81%)</title>
            <rect x="17.1848%" y="254" width="82.8128%" height="21" fill="rgb(255,113,113)" fg:x="8908243217" fg:w="42928434394"/>
            <text x="17.4348%" y="267.50">../scripts-3/enformer-predict-personalized.py:70 (run_single_predictions)</text>
        </g>
        <g>
            <title>        reg_prediction = enformer_predict(b[&apos;sequence&apos;], region=b[&apos;region&apos;], sample=individual, seq_type=b[&apos;sequence_source&apos;], model_path = model_path, model_func=model_func, output_dir=output_dir, script_path=script_path, logfile_path=logfile_path) (42,928,434,394 bytes, 82.81%)</title>
            <rect x="17.1848%" y="276" width="82.8128%" height="21" fill="rgb(255,113,113)" fg:x="8908243217" fg:w="42928434394"/>
            <text x="17.4348%" y="289.50">        reg_prediction = enformer_predict(b[&apos;sequence&apos;], region=b[&apos;region&apos;], sample=individual, seq_ty..</text>
        </g>
        <g>
            <title>all (51,837,952,364 bytes, 100%)</title>
            <rect x="0.0000%" y="100" width="100.0000%" height="21" fill="rgb(255,100,100)" fg:x="0" fg:w="51837952364"/>
            <text x="0.2500%" y="113.50"></text>
        </g>
    </svg>
</svg>