#!/bin/bash
#PBS -l select=4:system=polaris
#PBS -l walltime=03:00:00,filesystems=grand
#PBS -A covid-ct
#PBS -q preemptable
#PBS -N 1KG_individuals_evaluate
#PBS -k doe
#PBS -o /lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/logs/1KG_individuals_evaluate.out
#PBS -e /lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/logs/1KG_individuals_evaluate.err

PBS_O_WORKDIR=${PBS_O_WORKDIR}/tfpred_eval_run
mkdir -p $PBS_O_WORKDIR
echo Working directory is $PBS_O_WORKDIR
cd $PBS_O_WORKDIR

echo Jobid: $PBS_JOBID
echo Running on host `hostname`
echo Running on nodes `cat $PBS_NODEFILE`

NNODES=`wc -l < $PBS_NODEFILE`
NRANKS=1
NDEPTH=48
NTHREADS=2

#NTOTRANKS=$(( NNODES * NRANKS ))
NTOTRANKS=$(( NNODES * NRANKS_PER_NODE ))

echo "NUM_OF_NODES=${NNODES}  TOTAL_NUM_RANKS=${NTOTRANKS}  RANKS_PER_NODE=${NRANKS}  THREADS_PER_RANK=${NTHREADS}"

source ~/.bashrc
conda activate r-env

echo "PBS_JOBID = " $PBS_JOBID

mpiexec="/opt/cray/pe/pals/1.1.7/bin/mpiexec"
mkdir -p "${output_dir}"

model_dir="/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFPred_models/models/cistrome_AR_Prostate_2023-05-16"
#model_types=("linear" "logistic")

# split node files into 2 files
NUM_NODES_PER_MPI=1

# there is an issue with using `split --lines` on the nodefile, so we use `split --numeric-suffixes` instead and use `-nr` for a round-robin fashion of splitting
split -d -nr/${NNODES} --numeric-suffixes=1 --suffix-length=2 ${predict_on} predict_on.
split -d -nr/${NNODES} --numeric-suffixes=1 --suffix-length=2 ${PBS_NODEFILE} local_hostfile.

declare -a ll=(`seq -w 01 ${NNODES}`)
#printf '%s\n' "${ll[@]}"

for l in "${ll[@]}"; do
    echo "INFO - Running on node ${l}"

    ${mpiexec} --hostfile local_hostfile.${l} -n ${NRANKS} --ppn ${NRANKS} --depth ${NDEPTH} --cpu-bind depth --env OMP_NUM_THREADS="${NTHREADS}" ~/miniconda3/envs/r-env/bin/Rscript "${evaluate_rscript}" "${model_dir}" "predict_on.${l}" "${individuals_data_dir}" "${output_dir}" "${agg_method}" "${metainfo}" "${l}" & sleep 1

done
wait 

# for i in ${!model_types[@]}; do 
#     model_rds="${model_dir}/aggByMeanCenter_${metainfo}.${model_types[i]}.rds"
#     (
#         if [ -f "${model_rds}" ]; then
#             output_rds="${output_dir}/${agg_method}_${metainfo}_geuvadis.${model_types[i]}.rds"
#             echo "INFO - Model file exists for ${model_types[i]}"

#             echo ${mpiexec} --hostfile local_hostfile.${i} -n ${NRANKS} --ppn ${NRANKS} --depth ${NDEPTH} --cpu-bind depth --env OMP_NUM_THREADS="${NTHREADS}" ~/miniconda3/envs/r-env/bin/Rscript "${evaluate_rscript}" "${model_rds}" "predict_on.${i}" "${model_types[i]}" "${individuals_data_dir}" "${output_rds}" "${agg_method}" "${metainfo}"
#         else
#             echo "INFO - Model file does not exist for ${model_types[i]}"
#             exit 1
#         fi
#     ) & sleep 1
# done
# wait

status=$?
if [ $status -eq 0 ]; then
    echo "INFO - Exit status of evaluation run on individuals is: $status"
    #rm local_hostfile.*
else
    echo "INFO - Exit status of evaluation run on individuals is: $status"
fi


# model_rds='/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/TFPred_pipeline/models/cistrome_AR_aggByMeanCenter_linear_2023-01-24.rds'

# model_type='linear'

# 

# ${mpiexec} -n ${NRANKS} --ppn ${NRANKS} --depth ${NDEPTH} --cpu-bind depth --env OMP_NUM_THREADS="${NTHREADS}" ~/miniconda3/envs/r-env/bin/Rscript "${evaluate_rscript}" "${model_rds}" "${predict_on}" "${model_type}" "${individuals_data_dir}" "${output_rds}"



# qsub -v 'data_file=/lus/grand/projects/covid-ct/imlab/users/temi/projects/TFXcan/modeling_pipeline/data/train-test-val/kawakami/data_2022-12-12/kawakami_aggByCenter_FOXA1_old.csv.gz,metainfo=old' train_enet_model_pbs.sh

# ${mpiexec} -n ${NRANKS} --ppn ${NRANKS} --depth ${NDEPTH} --cpu-bind depth --env OMP_NUM_THREADS="${NTHREADS}" ~/miniconda3/envs/r-env/bin/Rscript "${evaluate_rscript}" "${model_dir}" "${model_id}" "${model_type}" "${predict_on}" "${individuals_data_dir}" "${individuals_ground_truth_file}" "${TF}" "${run_date}" "${output_dir}"

# qsub -v 'data_file=/lus/grand/projects/covid-ct/imlab/users/temi/projects/TFXcan/modeling_pipeline/data/train-test-val/kawakami/data_2022-12-12/kawakami_aggByCenter_FOXA1_old.csv.gz,metainfo=old' train_enet_model_pbs.sh

# individuals_data_dir='/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/AR_prostate/predictions_folder/cwas_imputed_AR_Prostate/predictions_2023-05-30/aggregated_predictions'
# predict_on='/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/AR_prostate/metadata/cwas_individuals.txt'
# evaluate_rscript='/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/scripts/tfpred/enet_evaluate_individuals.R'
# output_dir='/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/AR_prostate/output/imputed_cwas_predictions'


# qsub -v 'individuals_data_dir=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/association/predictions_folder/geuvadis_association_AR_Prostate/predictions_2023-06-02/aggregated_predictions,predict_on=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/association/metadata/geuvadis_association_AR_Prostate_2023-06-02.successful_predictions.csv,evaluate_rscript=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/scripts/tfpred/enet_evaluate_individuals.R,output_dir=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/association/output,agg_method=aggByMean,metainfo=AR_Prostate' enet_evaluate_individuals.pbs

# ==========

# split -n ${NNODES} --numeric-suffixes=1 --suffix-length=2 ${PBS_NODEFILE} --separator='\n' local_hostfile.

# # split the list of individuals into smaller files too
# # to be equal number with the nodes list
# split -n ${NNODES} --numeric-suffixes=1 --suffix-length=2 "${predict_on}" predict_on.

# num=`wc -l local_hostfile.all | cut -d ' ' -f1`
# den=10
# let "NNPM = $num / $den"
# split --lines=${NNPM} --numeric-suffixes=1 --suffix-length=2 local_hostfile.all local_hostfile.


# predict_on=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/association/metadata/geuvadis_association_AR_Prostate_2023-06-02.successful_predictions.csv
# num=`wc -l ${predict_on} | cut -d ' ' -f1`
# den=10
# let "NNPM = $num / $den"
# split --lines=${NNPM} --numeric-suffixes=1 --suffix-length=2 ${predict_on} predict_on.