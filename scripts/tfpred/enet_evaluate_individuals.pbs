#!/bin/bash
#PBS -l select=2:system=polaris
#PBS -l walltime=01:00:00,filesystems=grand
#PBS -A TFXcan
#PBS -q debug    
#PBS -N individuals_evaluate
#PBS -k doe
#PBS -o /lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/logs/individuals_evaluate.out
#PBS -e /lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/logs/individuals_evaluate.err

echo Working directory is $PBS_O_WORKDIR/tfpred_eval_run
PBS_O_WORKDIR=${PBS_O_WORKDIR}/tfpred_eval_run
mkdir -p ${PBS_O_WORKDIR}
cd $PBS_O_WORKDIR

echo Jobid: $PBS_JOBID
echo Running on host `hostname`
echo Running on nodes `cat $PBS_NODEFILE`

NNODES=`wc -l < $PBS_NODEFILE`
NRANKS=1
NDEPTH=48
NTHREADS=2

#NTOTRANKS=$(( NNODES * NRANKS ))
NTOTRANKS=$(( NNODES * NRANKS_PER_NODE ))

echo "NUM_OF_NODES=${NNODES}  TOTAL_NUM_RANKS=${NTOTRANKS}  RANKS_PER_NODE=${NRANKS}  THREADS_PER_RANK=${NTHREADS}"

source ~/.bashrc
conda activate r-env
echo "PBS_JOBID = " $PBS_JOBID

mpiexec="/opt/cray/pe/pals/1.1.7/bin/mpiexec"
rscript=~/miniconda3/envs/r-env/bin/Rscript

mkdir -p "${output_dir}"
model_rds="${model_dir}/${agg_method}_${metadata}.${model_type}.rds"

if [ ! -f ${model_rds} ]; then
    echo "ERROR - Model, ${model_rds}, does not exist." && exit 1;
fi

if [ ! -f ${predict_on} ]; then
    echo "ERROR - Individuals file, ${predict_on}, does not exist." && exit 1;
fi

# split the individuals into some number of nodes
x=`wc -l ${predict_on} | awk '{print $1}'`
y=${NNODES} 
ll=$(( ($x + $y - 1) / $y ))
split --lines="${ll}" --numeric-suffixes=1 --suffix-length=1 "${predict_on}" "predict_on."

# split node files into 2 files
NUM_NODES_PER_MPI=1
split --lines=${NUM_NODES_PER_MPI} --numeric-suffixes=1 --suffix-length=1 $PBS_NODEFILE local_hostfile.

# declare an array
output_files=()

for suf in `seq 1 ${NNODES}`; do 
    output_file="${output_dir}/${agg_method}_${metadata}_${extra_info}.${model_type}.${suf}.txt.gz"
    output_files+=("${output_file}") # to be used later
    (
        ${mpiexec} --hostfile local_hostfile.${suf} -n ${NRANKS} --ppn ${NRANKS} --depth ${NDEPTH} --cpu-bind depth --env OMP_NUM_THREADS="${NTHREADS}" ${rscript} "${evaluate_rscript}" --model_rds "${model_rds}" --predict_on "predict_on.${suf}" --individuals_data_dir "${individuals_data_dir}" --output_file "${output_file}" --agg_method "${agg_method}" --metadata "${metadata}"

        
    ) & sleep 1
done
wait

combine_rscript=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/scripts/tfpred/combine_predictions.R
combined_file="${output_dir}/${agg_method}_${metadata}_${extra_info}.${model_type}.txt.gz"
# collect the files into 1

echo "output files are: ${output_files[@]}"

if [ ${#output_files[@]} -gt 1 ]; then
    printf -v output_files_vec '%s,' "${output_files[@]}"
    # echo "${#output_files[@]}"
    # echo "${output_files_vec}"
    echo "INFO - combining ${#output_files[@]} files"
    ${rscript} ${combine_rscript} --command "combine_predictions" --files "${output_files_vec}" --combined_file ${combined_file}
else 
    echo "INFO - There is just one file; will change the name."
    mv "${output_files[0]}" ${combined_file}
fi

status=$?
if [ $status -eq 0 ]; then
    echo "INFO - Exit status of evaluation run on individuals is: $status"
    #rm local_hostfile.*
else
    echo "INFO - Exit status of evaluation run on individuals is: $status"
fi



# qsub -v 'model_dir=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFPred_models/models/cistrome_AR_Prostate_2023-05-16,individuals_data_dir=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/compare_predictors/predictions_folder/cwas_imputed_AR_Prostate/predictions_2023-06-28/aggregated_predictions,predict_on=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/AR_prostate/metadata/cwas_individuals.txt,evaluate_rscript=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/scripts/tfpred/enet_evaluate_individuals.R,output_dir=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/compare_predictors/tfpred_scores,model_type=linear,agg_method=aggByCollect,metadata=AR_Prostate,extra_info=CWAS' enet_evaluate_individuals.pbs



# model_rds='/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/TFPred_pipeline/models/cistrome_AR_aggByMeanCenter_linear_2023-01-24.rds'

# model_type='linear'

# 

# ${mpiexec} -n ${NRANKS} --ppn ${NRANKS} --depth ${NDEPTH} --cpu-bind depth --env OMP_NUM_THREADS="${NTHREADS}" ~/miniconda3/envs/r-env/bin/Rscript "${evaluate_rscript}" "${model_rds}" "${predict_on}" "${model_type}" "${individuals_data_dir}" "${output_rds}"



# qsub -v 'data_file=/lus/grand/projects/covid-ct/imlab/users/temi/projects/TFXcan/modeling_pipeline/data/train-test-val/kawakami/data_2022-12-12/kawakami_aggByCenter_FOXA1_old.csv.gz,metainfo=old' train_enet_model_pbs.sh

# ${mpiexec} -n ${NRANKS} --ppn ${NRANKS} --depth ${NDEPTH} --cpu-bind depth --env OMP_NUM_THREADS="${NTHREADS}" ~/miniconda3/envs/r-env/bin/Rscript "${evaluate_rscript}" "${model_dir}" "${model_id}" "${model_type}" "${predict_on}" "${individuals_data_dir}" "${individuals_ground_truth_file}" "${TF}" "${run_date}" "${output_dir}"

# qsub -v 'data_file=/lus/grand/projects/covid-ct/imlab/users/temi/projects/TFXcan/modeling_pipeline/data/train-test-val/kawakami/data_2022-12-12/kawakami_aggByCenter_FOXA1_old.csv.gz,metainfo=old' train_enet_model_pbs.sh

# individuals_data_dir='/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/AR_prostate/predictions_folder/cwas_imputed_AR_Prostate/predictions_2023-05-30/aggregated_predictions'
# predict_on='/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/AR_prostate/metadata/cwas_individuals.txt'
# evaluate_rscript='/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/scripts/tfpred/enet_evaluate_individuals.R'
# output_dir='/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/AR_prostate/output/imputed_cwas_predictions'


# qsub -v 'individuals_data_dir=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/association/predictions_folder/geuvadis_association_AR_Prostate/predictions_2023-06-02/aggregated_predictions,predict_on=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/association/metadata/geuvadis_association_AR_Prostate_2023-06-02.successful_predictions.csv,evaluate_rscript=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/scripts/tfpred/enet_evaluate_individuals.R,output_dir=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/association/output,agg_method=aggByMean,metainfo=AR_Prostate' enet_evaluate_individuals.pbs

# ==========

# split -n ${NNODES} --numeric-suffixes=1 --suffix-length=2 ${PBS_NODEFILE} --separator='\n' local_hostfile.

# # split the list of individuals into smaller files too
# # to be equal number with the nodes list
# split -n ${NNODES} --numeric-suffixes=1 --suffix-length=2 "${predict_on}" predict_on.

# num=`wc -l local_hostfile.all | cut -d ' ' -f1`
# den=10
# let "NNPM = $num / $den"
# split --lines=${NNPM} --numeric-suffixes=1 --suffix-length=2 local_hostfile.all local_hostfile.


# predict_on=/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/association/metadata/geuvadis_association_AR_Prostate_2023-06-02.successful_predictions.csv
# num=`wc -l ${predict_on} | cut -d ' ' -f1`
# den=10
# let "NNPM = $num / $den"
# split --lines=${NNPM} --numeric-suffixes=1 --suffix-length=2 ${predict_on} predict_on.
# qsub -v 'data_file=/lus/grand/projects/covid-ct/imlab/users/temi/projects/TFXcan/modeling_pipeline/data/train-test-val/kawakami/data_2022-12-12/kawakami_aggByCenter_FOXA1_old.csv.gz,metainfo=old' train_enet_model_pbs.sh