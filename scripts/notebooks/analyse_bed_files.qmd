---
title: "Analysing the bed files "
author: "Temi"
date: 'Friday May 19 2023'
format: 
  pdf: 
    toc: true
    number-sections: true
    code-line-numbers: true
---


```{r import libraries}
setwd('/grand/TFXcan/imlab/users/temi/projects/TFXcan/scripts/')

rm(list=ls())

library(glue)
library(GenomicRanges)
library(reticulate)
library(R.utils)
library(data.table)
library(tidyverse)
```

```{r}
project_dir <- '/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan'
bedfiles_dir <- '/lus/grand/projects/TFXcan/imlab/data/baca_cwas/sorted_bed_hg38'
```

### Cleaning up the bedfiles names and creating a samples names metasheet
```{r}
cwas_bed_files <- list.files(bedfiles_dir)
bednames <- cwas_bed_files %>% strsplit('\\.') %>% sapply(getElement, 1)
bednames[1:5]
```

```{r}
samples_dt <- sapply(bednames, function(bedname){
    ifelse(grepl('Healthy', bedname), 'healthy', 'tumor')
}) |> as.data.frame() %>% tibble::rownames_to_column('sample')
colnames(samples_dt)[2] <- 'status'

formatted_bed_names <- c()
for(nn in samples_dt$sample){
  if(startsWith(nn, 'DF')){
    a <- gsub('_AR', 'CI', nn) %>% gsub('T', '', .) 
  } else if (startsWith(nn, 'NKI')){
    a <- gsub('_AR_Healthy', '', nn) %>% gsub('_AR_Tumor', 'T', .) %>% gsub('_rep1', '', .) %>% gsub('_rep2', '', .)
  } else if (startsWith(nn, 'P')){
    a <- gsub('_AR_1', '', nn) %>% paste0('NKI_', .)
  } else if (startsWith(nn, 'AR')){
    a <- gsub('AR_', 'UW_', nn)
  } else {
    a <- 'NA'
  }
  formatted_bed_names <- append(formatted_bed_names, a)
}

samples_dt$sample_formatted <- formatted_bed_names
#names_dt <- names_dt[order(match(names_dt[, 'nnames'], nnames)), ]

data.table::fwrite(samples_dt, file=glue('{project_dir}/baca_cwas/metadata/samples_metadata.txt'), quote=F, row.names=F)

samples_dt[1:5, ]
```


#### Looking at the bed files
```{r}
cwas_loci <- data.table::fread(glue('{project_dir}/baca_cwas/bed_files/baca_cwas_loci_hg38.bed'), col.names=c('chr', 'hg38_start', 'hg38_end', 'hg19_id'))
cwas_loci <- cwas_loci %>% tidyr::unite('hg38_id', c('chr', "hg38_start",  "hg38_end" ))
cwas_loci[1:5, ]
```

Is any hg38_id cwas loci present in the first 10 bedfiles?
```{r}
cwas_loci_hg38 <- cwas_loci %>% tidyr::separate(col=hg38_id, sep='_', into=c('chr', 'start', 'end')) %>% dplyr::mutate(across(c(start, end), as.numeric)) %>% dplyr::select(chr, start, end)

# find the center
cwas_loci_hg38 <- cwas_loci_hg38 %>% dplyr::mutate(center=(end + start)/2) %>% dplyr::mutate(center_start=center - (128 + 63), center_end=center + (128 + 64))

cwas_loci_hg38_granges <- with(cwas_loci_hg38, GenomicRanges::GRanges(chr, IRanges(center_start, center_end), strand='+', score=0))

#cwas_loci_hg38 <- cwas_loci_hg38 %>% dplyr::select(chr, center_start, center_end)

cwas_loci_hg38_granges
```

confirm that the widths make sense
```{r}
GenomicRanges::width(cwas_loci_hg38_granges) |> mean() # 128 - 128 - 128
```

```{r}
# read each bed file and turn into a granges object too
cwas_gt <- lapply(cwas_bed_files, function(each_bed){
    bfile <- data.table::fread(glue('{bedfiles_dir}/{each_bed}')) %>% dplyr::select(chr=V1, start=V2, end=V3) 
    gfile <- bfile %>% with(GenomicRanges::GRanges(chr, IRanges(start, end), strand='+', score=0))
    bfile_overlap <- GenomicRanges::findOverlaps(query=cwas_loci_hg38_granges, subject=gfile, type='any')
    
    # list(cwas_loci=cwas_loci_hg38[queryHits(bfile_overlap), ], bed_loci=bfile[subjectHits(bfile_overlap), ], positive=cwas_loci_hg38[queryHits(bfile_overlap), ], negative=cwas_loci_hg38[-queryHits(bfile_overlap), ])

    positive=cwas_loci_hg38[queryHits(bfile_overlap), ]
    negative=cwas_loci_hg38[-queryHits(bfile_overlap), ]

    pos <- positive %>% tidyr::unite('loci', chr:end, sep='_') %>% dplyr::select(loci) %>% dplyr::mutate(class=1)
    neg <- negative %>% tidyr::unite('loci', chr:end, sep='_') %>% dplyr::select(loci) %>% dplyr::mutate(class=0)

    rbind(pos, neg) |> setDT()
})

```


Merging these two by using inner_join or merge functions requires a lot of memory

So, 

1. inner_join on two sets (split the list into 2)
2. order by the rownames
3. cbind

```{r}
length(cwas_gt)
```

```{r}
a <- cwas_gt[[1]]
for(i in 2:64){
    print(i)
    a <- dplyr::inner_join(a, cwas_gt[[i]], by = c('loci'))
}
a <- a %>% dplyr::distinct()
names(a)[2:ncol(a)] <- (cwas_bed_files %>% strsplit('\\.') %>% sapply(., getElement, 1))[1:64]

b <- cwas_gt[[65]]
for(i in 66:length(cwas_gt)){
    print(i)
    b <- dplyr::inner_join(b, cwas_gt[[i]], by = c('loci'))
}
b <- b %>% dplyr::distinct()
names(b)[2:ncol(b)] <- (cwas_bed_files %>% strsplit('\\.') %>% sapply(., getElement, 1))[65:length(cwas_gt)]
```

```{r}
a[1:5, ] ; b[1:5, ]
```

I can order by the loci and just cbind e.g
```{r}
b[order(match(b$loci, a$loci)), ][1:5, 1:5] ; a[1:5, 1:5]
```

```{r}
#names(cwas_gt) <- cwas_bed_files %>% strsplit('\\.') %>% sapply(., getElement, 1)
# merge into 1 
b <- b[order(match(b$loci, a$loci)), ] %>% dplyr::select(-loci)
cwas_gt <- cbind(a, b) %>% setDT() %>% dplyr::distinct()
cwas_gt
#colnames(cwas_gt)[2:ncol(cwas_gt)] <- cwas_bed_files %>% strsplit('\\.') %>% sapply(., getElement, 1)
cwas_gt |> dim()
```
write the ground truth to a file
```{r}
cwas_gt %>% data.table::fwrite(file=glue('{project_dir}/baca_cwas/metadata/cwas_individuals_ground_truth.txt'), quote=F, row.names=F)
```



### Compare ground truths with the TFPred scores
```{r}
# ground truth
cwas_gt <- data.table::fread(file=glue('{project_dir}/baca_cwas/metadata/cwas_individuals_ground_truth.txt'))
cwas_gt[1:5, 1:5]
```

```{r}
# predictions

```














These present loci are 1s and any other is 0

```{r}
intersection_dir <- '/lus/grand/projects/TFXcan/imlab/data/baca_cwas/intersected_bed'
```

```{r}
intersection_dt <- data.table::fread(glue('{intersection_dir}/cwas_intersected_hg38.txt'))
dim(intersection_dt)
```

```{r}
colnames(intersection_dt)[6:ncol(intersection_dt)] <- colnames(intersection_dt)[6:ncol(intersection_dt)] %>% strsplit(., '/') %>% sapply(., getElement, 10) %>% strsplit(., '\\.') %>% sapply(., getElement, 1)

intersection_dt[1:5, 1:8]
```

```{r}
intersection_granges <- with(intersection_dt, GRanges(chrom, IRanges(start, end), strand='+', score=0))
intersection_granges <- GenomicRanges::reduce(intersection_granges)
intersection_granges
```

```{r}
int_dt_granges <- with(intersection_dt, GRanges(chrom, IRanges(start, end), strand='+', score=0))
int_dt_granges
```

Find overlaps
```{r}
overlaps <- GenomicRanges::findOverlaps(query=int_dt_granges, subject=intersection_granges, type='within')
overlaps
```

```{r}
test <- (intersection_dt[subjectHits(overlaps), ] %>% distinct(chrom, start, end, .keep_all=T))[1:10, 1:10]
test
```

```{r}
# 
int_overlaps <- cbind(as.data.frame(overlaps), intersection_dt)
int_overlaps[1:5, 1:5]

```

Groupby subjectHits

```{r}
squish <- function(grp){
    chrom <- unique(grp['chrom']) |> unlist() |> unname()
    start <- min(grp['start'])
    end <- max(grp['end'])
    info <- grp %>% dplyr::select(-c(queryHits, chrom, start, end, num, list)) %>% group_map(~ colSums(.x))
    out <- c(chrom, start, end, info[[1]]) #|> as.data.frame()
    return(out)
}
```

```{r}
squish(test2)
```

```{r}
test3 <- int_overlaps %>% dplyr::group_by(subjectHits) %>% group_map(~ squish(.x))
test3 <- do.call('rbind', test3) |> data.frame()
colnames(test3)[1:3] <- c('chr', 'start', 'end')
test3[1:5, 1:10]
```


```{r}
data.table::fwrite(test3, file = '/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/AR_prostate/info/cwas_ground_truth.txt', quote=F, row.names=F, sep='\t')
```


```{r}
colnames(intersection_dt)[6:ncol(intersection_dt)] %>% as.data.frame() %>% data.table::fwrite(file = '/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/AR_prostate/info/cwas_individuals.txt', quote=F, row.names=F)
```


```{r}
list.files('/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/AR_prostate/predictions_folder/cwas_AR_Prostate/predictions_2023-05-16/aggregated_predictions') %>% strsplit('_')
```


### TFPred scores on the ground truth

```{r}
experiment_dir <- '/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/experiments/AR_prostate'
```

```{r}
# for some reason, fread isn't working right
#ground_truth <- data.table:fread(glue('{experiment_dir}/info/cwas_ground_truth.txt'), sep='\t')
ground_truth <- read.table(glue('{experiment_dir}/info/cwas_ground_truth.txt'), header=TRUE)
cwas_individuals <- data.table::fread(glue('{experiment_dir}/metadata/cwas_individuals.txt'), header=FALSE)$V1
cwas_loci <- data.table::fread(glue('{experiment_dir}/metadata/cwas_intervals.txt'), header=FALSE)$V1
```

```{r}
ground_truth[1:5, 1:10]
```

```{r}
cwas_loci_dt <- cwas_loci %>% strsplit('_') %>% do.call('rbind', .) %>% as.data.frame()
colnames(cwas_loci_dt) <- c('chr', 'start', 'end')
cwas_loci_dt <- cwas_loci_dt[!(is.na(cwas_loci_dt$start) | is.na(cwas_loci_dt$end)), ]
cwas_loci_dt <- cwas_loci_dt %>% dplyr::mutate(start=as.numeric(start), end=as.numeric(end))
cwas_loci_granges <- with(cwas_loci_dt, GRanges(chr, IRanges(start, end), strand='+', score=0))
cwas_loci_granges
```

Plot the distribution of peak widths
```{r}
GenomicRanges::width(cwas_loci_granges) %>% hist(main='distribution of peak widths for AR chip-seq', xlab='width', breaks = seq(1, max(.), length.out=100))
```

```{r}
gt_granges <- with(ground_truth, GRanges(chr, IRanges(start, end), strand='+', score=0))
gt_granges
```

```{r}
gt_in_cwas_loci <- GenomicRanges::findOverlaps(query=cwas_loci_granges, subject=gt_granges, type='any')
gt_in_cwas_loci
```

```{r}
gt_in_cwas <- ground_truth[subjectHits(gt_in_cwas_loci), ]
#gt_not_in_cwas <- ground_truth[-subjectHits(gt_in_cwas_loci), ]
gt_in_cwas[1:5, 1:10]#; gt_not_in_cwas[1:5, 1:10]
```

```{r}
# predictions
tfpred_predictions <- readRDS(glue('{experiment_dir}/output/cwas_AR_Prostate_linear.rds'))
```

```{r}
names(tfpred_predictions)
```

```{r}
nnames <- names(gt_in_cwas)[-c(1:3)]# %>% gsub('AR', '', .)
nnames
```

```{r}
formatted_bed_names <- c()
for(nn in nnames){
  if(startsWith(nn, 'DF')){
    a <- gsub('_AR', 'CI', nn) %>% gsub('T', '', .) 
  } else if (startsWith(nn, 'NKI')){
    a <- gsub('_AR_Healthy', '', nn) %>% gsub('_AR_Tumor', 'T', .) %>% gsub('_rep1', '', .) %>% gsub('_rep2', '', .)
  } else if (startsWith(nn, 'P')){
    a <- gsub('_AR_1', '', nn) %>% paste0('NKI_', .)
  } else if (startsWith(nn, 'AR')){
    a <- gsub('AR_', 'UW_', nn)
  }
  formatted_bed_names <- append(formatted_bed_names, a)
}

formatted_bed_names
```

```{r}
names_dt <- cbind(nnames, formatted_bed_names)
names_dt <- names_dt[order(match(names_dt[, 'nnames'], nnames)), ]
```

```{r}
colnames(gt_in_cwas)[-c(1:3)] <- names_dt[, 'formatted_bed_names']
gt_in_cwas[1:5, 1:10]
```


```{r}
# "DFCI_1592"
one_sample <- "DFCI_1592"
gt_one <- gt_in_cwas %>% dplyr::select(chr, start, end, all_of(one_sample)) 
gt_one[one_sample] <- ifelse(gt_one[one_sample] > 0, 1, 0)
gt_one$loci <- with(gt_one, paste(chr, start, end, sep='_'))
gt_one[1:5, ]
```

```{r}
with(gt_one, paste(chr, start, end, sep='_'))
```

```{r}
table(gt_one[, one_sample])
```

```{r}
one_sample_predictions <- tfpred_predictions[[one_sample]]$aggByMeanCenter
one_sample_predictions|> head()
```

```{r}
loci_overlaps <- function(a, b, .type='any'){
  a <- a[!is.na(a)]
  b <- b[!is.na(b)]

  a <- a %>% strsplit(., '_') %>% do.call('rbind', .) %>% as.data.frame()
  b <- b %>% strsplit(., '_') %>% do.call('rbind', .) %>% as.data.frame()

  colnames(a) <- colnames(b) <- c('chr', 'start', 'end')

  a <- with(a, GenomicRanges::GRanges(chr, IRanges(as.numeric(start), as.numeric(end)), strand='+', score=0))
  b <- with(b, GenomicRanges::GRanges(chr, IRanges(as.numeric(start), as.numeric(end)), strand='+', score=0))

  return(GenomicRanges::findOverlaps(query=a, subject=b, type=.type))
}
```

```{r}
overlaps <- loci_overlaps(gt_one$loci, one_sample_predictions$regions)
overlaps
```

Rename the ground truth loci using these new names
```{r}
loci_dt <- data.frame(ground_truth_loci = gt_one$loci[queryHits(overlaps)], cwas_loci = one_sample_predictions$regions[subjectHits(overlaps)])
loci_dt |> head()
```

```{r}
dt_merged <- merge(
  merge(gt_one, loci_dt, by.x='loci', by.y='ground_truth_loci'),
  one_sample_predictions, by.x='cwas_loci', by.y='regions'
  )
dt_merged |> head()
```

```{r}
one_sample_predictions$regions <- one_sample_predictions$regions[subjectHits(overlaps)] |> unique()
one_sample_predictions[1:5, ]
```

```{r}
one_sample_predictions$regions[subjectHits(overlaps)] |> unique()
```

```{r}
one_sample_predictions[1:5, ] ; gt_one[1:5, ] ; dim(one_sample_predictions) ; dim(gt_one)
```


```{r}
boxplot(dt_merged$prediction_link ~ dt_merged$DFCI_1592) ; t.test(dt_merged$prediction_link ~ dt_merged$DFCI_1592) 
```

### For everyone
```{r}
gt_one <- gt_in_cwas %>% dplyr::select(chr, start, end, all_of(one_sample)) 
gt_one[one_sample] <- ifelse(gt_one[one_sample] > 0, 1, 0)
gt_one$loci <- with(gt_one, paste(chr, start, end, sep='_'))
```


```{r}
gt_in_cwas_merged <- gt_in_cwas %>% tidyr::unite('loci', chr:end) %>% dplyr::inner_join(loci_dt, by = c('loci' = 'ground_truth_loci')) %>% dplyr::relocate(loci, cwas_loci)
gt_in_cwas_merged[1:5,1:5]
```


```{r}

# filter for valid cwas_individuals
valid_individuals <- names(gt_in_cwas)[-c(1:3)][!is.na(match(names(gt_in_cwas)[-c(1:3)], names(tfpred_predictions)))] |> unique()

out <- lapply(valid_individuals, function(each_ind){
  gt <- gt_in_cwas_merged %>% dplyr::select(cwas_loci, all_of(each_ind)) 
  predictions <- tfpred_predictions[[each_ind]]$aggByMeanCenter %>% as.data.frame() %>% inner_join(gt, by=c('regions' = 'cwas_loci')) %>% distinct(regions, .keep_all = TRUE)
  return(predictions)
})

names(out) <- valid_individuals
```


```{r}
length(out)
```

```{r}
# collect all predictions and regions separately
predicted <- lapply(out, function(each_o){
  return(each_o[, 2])
})
predicted <- do.call('cbind', predicted)

truth <- lapply(out, function(each_o){
  return(ifelse(each_o[, 3] > 0, 1, 0))
})
truth <- do.call('cbind', truth)

```


```{r}
rownames(truth) <- rownames(predicted) <- out[[1]][, 1]
identical(rownames(truth), rownames(predicted))

nbou <- apply(truth,1,sum)
ind <- nbou > 0 & nbou < 121
obs <- truth[ind,]
pred <- predicted[ind,]
identical(rownames(obs), rownames(pred))

pvec = rep(NA,nrow(obs))
tvec = rep(NA,nrow(obs))

for(cc in 1:nrow(obs) ) {
    res = t.test(pred[cc, obs[cc,]==1], pred[cc,obs[cc, ]==0])
    pvec[cc] = res$p.value
    tvec[cc] = res$statistic
}

names(pvec) <- names(nbou > 0 & nbou < 121)
```

```{r}
obs[1:5, 1:5] ; pred[1:5, 1:5]
```

```{r}
hist(pvec, xlab='pvalue', main='')
mtext(glue('histogram of t-test pvalues \nacross {length(out)} individuals for {length(pvec)} loci'), adj=0, cex=1.5,line=0)
```

Order the pvalues and plot the 5 most significant ones
```{r}
pvalues_regions <- pvec[order(pvec)]
top_regions <- pvalues_regions[1:12]
top_regions
```
```{r}
#pscores_top_regions <- pscores_dt[(pscores_dt$region %in% top_regions) & (pscores_dt$individual %in% ind_names), ]
best_obs <- obs[names(top_regions), ] %>% as.data.frame() %>% tibble::rownames_to_column('loci')
best_pred <- pred[names(top_regions), ] %>% as.data.frame() %>% tibble::rownames_to_column('loci')
pscores_top_regions <- merge(best_pred %>% tidyr::pivot_longer(!loci), 
  best_obs %>% tidyr::pivot_longer(!loci), by=c('loci', 'name'))

colnames(pscores_top_regions) <- c('loci', 'individuals', 'tfpred_score', 'class')

pscores_top_regions %>%
  dplyr::mutate(class = as.factor(class), region=as.factor(loci)) %>%
  ggplot(.) + aes(x=class, y=tfpred_score, group=class) + 
  geom_boxplot() + 
  geom_jitter(col='red') + 
  facet_wrap(~region, scales='free') + theme_bw() +
  labs(title='Boxplot of top 12 regions (ranked by p-values)', y='TFPred scores') +
  theme(plot.title=element_text(size=20), axis.title=element_text(size=18))
```


```{r}
pscores_top_regions %>%
  dplyr::mutate(class = as.factor(class), region=as.factor(loci)) %>%
  ggplot(.) + aes(x=tfpred_score, fill=class) + 
  geom_density() + 
  facet_wrap(~region, scales='free') + theme_bw() +
  labs(title='Boxplot of top 9 regions (ranked by p-values)', y='TFPred scores') +
  theme(plot.title=element_text(size=20), axis.title=element_text(size=18))
```

### CWAS weights predictions

```{r}
predict_summary <- data.table::fread('/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/prediXcan/output/cwas_individuals/top1.qtl/baca_cwas_summary.txt')
predict_summary[1:5, ]
```

```{r}
predict_summary %>% dplyr::filter(!is.na(pred_perf_r2)) %>% dim()
```

```{r}
predict_summary %>% dplyr::filter(!is.na(n_snps_used))# %>% dim()
```

```{r}
imlab_dir <- '/lus/grand/projects/TFXcan/imlab'
project_dir <- glue('{imlab_dir}/users/temi/projects/TFXcan/TFPred_pipeline')
```
```{r}
predixcan_result_dir <- '/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/prediXcan/output'
baca_models <- c('lasso', 'lasso.as', 'lasso.plasma', 'top1.as', 'top1.qtl', 'top1')
```

```{r}
baca_predictions <- data.table::fread(glue('{predixcan_result_dir}/cwas_individuals/{baca_models[6]}/baca_cwas_predict.txt'))
baca_predictions <- baca_predictions[, -1] |> t() %>% as.data.frame()
colnames(baca_predictions) <- baca_predictions[1, ]
baca_predictions <- baca_predictions[-1, ] %>% tibble::rownames_to_column('region')
baca_predictions$region <- gsub('\\:|\\-', '_', baca_predictions[['region']])
baca_predictions <- baca_predictions %>% dplyr::mutate(across(!region, as.numeric))
baca_predictions[1:5, 1:5] |> summary() ; baca_predictions[1:5, 1:5]
```

```{r}
loci <- read.table('/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/baca_cwas/predictors/baca_cwas_AR_regions_hg38_2023-01-27.txt', header=F)$V1
loci <- loci[!is.na(loci)]
length(loci)
```

```{r}
# read in cwas supplementary data
cwas_supp <- readxl::read_xlsx(glue('{project_dir}/metadata/cwas_supplementary_table.xlsx'), sheet=3, skip=1) %>% dplyr::select(ID, MODEL, MODELCV.PV, MODELCV.R2)
cwas_supp[1:5, ] ; cwas_supp |> dim()
```

```{r}
hg38_bed <- '/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/baca_cwas/bed_files/baca_cwas_loci_hg38.bed'
hg38_bed_files <- data.table::fread(hg38_bed, col.names=c('chr', 'hg38_start', 'hg38_end', 'hg19_id'))
hg38_bed_files <- hg38_bed_files %>% tidyr::unite('hg38_id', c('chr', "hg38_start",  "hg38_end" ))
hg38_bed_files[1:5, ]

#cwas_supp[cwas_supp$ID %in% hg38_bed_files$hg19_id, ]
```

```{r}
cwas_supp <- cwas_supp %>% dplyr::left_join(hg38_bed_files, by=c('ID' = 'hg19_id'))
cwas_supp[1:5, ] ; cwas_supp |> dim()
```

```{r}
cwas_supp_top1 <- cwas_supp %>%
    dplyr::filter(MODELCV.PV < 0.01)

cwas_supp_top1[1:5,] ; length(cwas_supp_top1$ID)
```

```{r}
cwas_top1_loci <- gsub(':|-', '_', cwas_supp_top1$hg38_id)
cwas_top1_loci[1:5] ; length(cwas_top1_loci)
```


### Correlation

```{r}
common_regions <- intersect(names(pvalues_regions), baca_predictions$region)
length(common_regions)
```

```{r}

```

```{r}
#tfpred_ca <- linear_agg_eval %>% tibble::column_to_rownames('region')
tfpred_ca <- pred[common_regions, ]
cwas_ca <- baca_predictions %>% tibble::column_to_rownames('region')
cwas_ca <- cwas_ca[common_regions, colnames(tfpred_ca)]
```

```{r}
tfpred_ca[1:5, 1:5] ; cwas_ca[1:5, 1:5] 
dim(tfpred_ca) ; dim(cwas_ca)
```

```{r}
source(glue('{project_dir}/pipelines/utilities.R'))
```

```{r}
region_correlations_test <- purrr::map(1:length(common_regions), function(i){
    ca <- tfpred_ca[i, ] |> unlist() |> unname()
    da <- cwas_ca[i, ] |> unlist() |> unname() |> as.numeric()
    cor_test <- cor.test(ca, da, method='spearman')
    return(c(cor_test$p.value, cor_test$estimate))
}, .progress=T)

df_cor_test <- do.call('rbind', region_correlations_test)
colnames(df_cor_test) <- c('p_value', 'r')
rownames(df_cor_test) <- common_regions
df_cor_test[1:5, ]
```

```{r}
#par(mfrow=c(1, 2), oma = c(0, 0.5, 2, 0), mar=c(4,4,2,2))
hist(df_cor_test[, 'r']^2, main='', xlab=expression(italic(R^2) ~ ", R-squared"), cex.lab=1, col='brown')
mtext(expression("Histogram of" ~ rho ~ "(cor test)"), side=3, line=2, adj=0.05, cex=1.2) 
mtext(glue("CWAS scores vs. TFPred scores for {nrow(df_cor_test)} regions"), side=3, line=0, cex=1.2, adj=0.05)
```

```{r}
#par(mfrow=c(1, 2), oma = c(0, 0.5, 2, 0), mar=c(4,4,2,2))
hist(df_cor_test[, 'r'], main='', xlab=expression(italic(R^2) ~ ", R-squared"), cex.lab=1, col='brown')
mtext(expression("Histogram of" ~ rho ~ "(cor test)"), side=3, line=2, adj=0.05, cex=1.2) 
mtext(glue("CWAS scores vs. TFPred scores for {nrow(df_cor_test)} regions"), side=3, line=0, cex=1.2, adj=0.05)
```

```{r}
#par(mfrow=c(1, 2), oma = c(0, 0.5, 2, 0), mar=c(4,4,2,2))
hist(df_cor_test[, 'r'], main='', xlab=expression(italic(r)[s] ~ ", spearman correlation"), cex.lab=1, col='brown')
mtext(expression("Histogram of" ~ r[s] ~ "(cor test)"), side=3, line=2, adj=0.05, cex=1.2) 
mtext(glue("CWAS scores vs. TFPred scores for {nrow(df_cor_test)} regions"), side=3, line=0, cex=1.2, adj=0.05)
```

```{r}
# qqunif(df_cor_test[, 'p_value'], frame.plot=F, pch=21, bg='black')
# mtext(expression("qqplot of" ~ italic(p) ~ "(cor test)"), side=3, line=2, adj=0.05, cex=1.2)
# mtext(glue("CWAS scores vs. TFPred scores for {nrow(df_cor_test)} regions"), side=3, line=0, cex=1.2, adj=0.05)
```

```{r}
qq_generic(pvec, distribution='uniform', neg_log10_values=T, BH=T, params_to_legend=list(x='topleft', bty = "n"), params_to_plot=list(frame.plot=F, pch=19))
mtext(expression("qqplot of" ~ italic(p) ~ "(cor test)"), side=3, line=2, adj=0.05, cex=1.2)
mtext(glue("CWAS scores vs. TFPred scores for {nrow(df_cor_test)} regions"), side=3, line=0, cex=1.2, adj=0.05)
```

#### Compare their correlations with ours
```{r}
cwas_rsq_table <- cwas_supp %>% 
    dplyr::filter(!is.na(hg38_id)) %>%
    tibble::column_to_rownames('hg38_id')
```

```{r}
length(unique(cwas_supp$hg38_id)) ; length(cwas_supp$hg38_id)
```

```{r}
a <- as.data.frame(df_cor_test)[rownames(cwas_rsq_table), 'r']^2
b <- cwas_rsq_table$MODELCV.R2

length(a) ; length(b)
```
```{r}
plot(b, a, xlab='TFPred R-squared', ylab='CWAS R-squared')
abline(lm(a ~ b))
```

```{r}
data.frame(a, b) %>%
    dplyr::filter((is.finite(a) &  is.finite(b))) %>%
    ggplot(., aes(b, a)) +
    geom_smooth()
    #geom_point() 
    
```
```{r}
summary(df_cor_test[, 'r']^2)
```

```{r}
hist(df_cor_test[, 'r']^2, main='', xlab=expression(italic(R^2) ~ ", correlation"), col='brown')
mtext(glue('Distribution of R^2 between CWAS {baca_models[6]} scores and TFPred scores \nfor {nrow(df_cor_test)} regions'), adj=0, cex=1.5)
```


```{r}
loci_corr_0.01 <- df_cor_test[which(df_cor_test[, 'p_value'] < 0.01), 'r']#[cwas_top1_loci] |> summary()
loci_corr_0.01 <- loci_corr_0.01[names(loci_corr_0.01) %in% cwas_top1_loci] #|> summary()
```

```{r}
any(is.na(loci_corr_0.01))
```

```{r}
hist(loci_corr_0.01 |> unname(), breaks=20, xlab='r, correlation', main='')
mtext('Histogram of correlation for cwas loci < 0.01 and TFPred loci < 0.01', line=1, side=3)
```


```{r}
cwas_wgts <- list.files('/lus/grand/projects/TFXcan/imlab/users/temi/projects/TFXcan/baca_cwas/data/AR')
cwas_wgts[1:5]
```

```{r}
out <- cwas_wgts %>% strsplit(':|-|\\.') %>% sapply(., function(each_row){
  paste(each_row[1:3], collapse='_')
}, simplify=TRUE)
out[1:5]
```

```{r}
hg38_bed_files[1:5, ]
```


```{r}
'chr1:100037994_100038294.wgt.RDat' %in% cwas_wgts
```