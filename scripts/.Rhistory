motif_instances <- read.table(glue("{OUTPUT_DIR}/{TF}_findinstances.txt"), sep = "\t", header = T, stringsAsFactors = FALSE) # MOTIFS
MotifLibrary <- read.table(glue("{OUTPUT_DIR}/{TF}_MotifThresholdList.txt"), sep = "\t", header = F, stringsAsFactors = FALSE) # threshold to determine a motif ???
colnames(train_df) <- c("seqnames","starts","ends","names","scores","strands")
View(train_df)
View(motif_instances)
i <- 1
print(paste0("row ", i, " of ", nrow(train_df)))
w <- which(motif_instances$PositionID == train_df[i,4]) #match peakID, guaranteed to have a match
w
train_df[i,4]
motif_instances$PositionID
which(motif_instances$PositionID == train_df[i,4])
i <- 1000
print(paste0("row ", i, " of ", nrow(train_df)))
w <- which(motif_instances$PositionID == train_df[i,4]) #match peakID, guaranteed to have a match
w
motif_instances$PositionID == train_df[i,4]
motif_instances$MotifScore[w]
max(motif_instances$MotifScore[w])
w[match(max(motif_instances$MotifScore[w]), motif_instances$MotifScore[w])]
#only choose 1 motif, take the one with the top score
w1 <- w[match(max(motif_instances$MotifScore[w]), motif_instances$MotifScore[w])]
motif_instances$Strand[w1]
motif_instances$Offset[w1]
nchar(motif_instances$Sequence[w1])
floor(0.5*(nchar(motif_instances$Sequence[w1])))
nchar(motif_instances$Sequence[w1])
train_df$starts[i]
motif_threshold[1,1]
motif_threshold <- read.table(glue("{OUTPUT_DIR}/{TF}_MotifThresholdList.txt"), sep = "\t", header = F, stringsAsFactors = FALSE) # threshold to determine a motif ???
motif_threshold[1,1]
motifs
instscan <- read.table(glue("{REPRO_DIR}/Motifs/scanMotifsgenomewide.{motifs}.15000.sort.txt"), sep = "\t", header = F, stringsAsFactors = FALSE)
motifs <- motif_threshold[1,1]
instscan <- read.table(glue("{REPRO_DIR}/Motifs/scanMotifsgenomewide.{motifs}.15000.sort.txt"), sep = "\t", header = F, stringsAsFactors = FALSE)
instscan
instscan <- instscan[order(instscan[,6], decreasing = T), ]
View(instscan)
View(train_df)
Granges <- with(train_df, GRanges(chr, IRanges(start,end), strand, score, id = id))
train_df <- read.table(glue("{OUTPUT_DIR}/{TF}_train_df.txt"), sep = "\t", header = F, stringsAsFactors = FALSE) #old version: ChIPbed1.txt
View(train_df)
colnames(train_df) <- c('chr','start','end','id','score','strand') #score may be number of reads
Granges <- with(train_df, GRanges(chr, IRanges(start,end), strand, score, id = id))
Granges
assign(paste0(motifs,"_Granges"), tf_Granges)
tf_Granges <- with(train_df, GRanges(chr, IRanges(start,end), strand, score, id = id))
assign(paste0(motifs,"_Granges"), tf_Granges)
View(Foxp3_Treg_Granges)
instscan
sapply_instscan <- sapply(1:nrow(allinstscan), function(x) strsplit(allinstscan[x,1], "-")[[1]][1])
allinstscan <- instscan
sapply_instscan <- sapply(1:nrow(allinstscan), function(x) strsplit(allinstscan[x,1], "-")[[1]][1])
sapply_instscan
allinstscan
allinstscan[,1] <- sapply_instscan
allinstscan[,6]
MotifThreshold[1,2]
motif_threshold[1,2]
allinstscan[,6]/motif_threshold[1,2]
allinstscan[,6] <- allinstscan[,6]/motif_threshold[1,2] # divide or normalize
which(allinstscan[,6] < 1)
w <- which(allinstscan[,6] < 1)
if(length(w)>0){allinstscan <- allinstscan[-w,]}
motifmatrix <- matrix(0,nrow(MotifThreshold),3)
motifmatrix
motifmatrix <- matrix(0,nrow(motif_threshold),3)
View(motifmatrix)
#col1: motif name with cell type (1 per row)
#col2: degenerate motif name (used in scanMotifsGenome.pl), get with table(instances_scan[,1])
#col3: Granges files
motifmatrix[,1] <- motifs
motifmatrix[,2] <- motifs
motifmatrix[,3] <- paste0(motifs,"_Granges")
#windowsize <- 380 why?????
print(paste0("working on ",motifmatrix[1,1]))
train_df_newpeaks <- read.table(glue("{OUTPUT_DIR}/{TF}_train_df_newpeaks.txt"), sep = "\t", header = F, stringsAsFactors = FALSE)
View(train_df_newpeaks)
motifmatrix[1,2]
train_df_newpeaks[,5]
w_mcp <- which(train_df_newpeaks[,5] == motifmatrix[1,2]) #motifcentered peaks
train_df_newpeaks
w_mcp <- which(train_df_newpeaks[,5] == motifmatrix[1,2]) #motifcentered peaks !!! THIS LOOKS WRONG BUT LEMME GO ON ====
motifcentered_specificTF <- train_df_newpeaks[w_mcp,]
w_mcp
train_df_newpeaks[w_mcp,]
motifmatrix[1,2]
ff
d
ee
de
d
ed
dagjiajw
2+2
motifmatrix[1,2]
colnames(motifcentered_specificTF) <- c('chr','start','end','id','score','strand')
Granges_obj_mc <- with(motifcentered_specificTF, GRanges(chr, IRanges(start,end), strand, score, id = id))
allinstscan[,1]
w_inst <- which(allinstscan[,1] == motifmatrix[1,2]) #instances pertaining to specific motif
instances_specificTF <- allinstscan[w_inst,]
instances_specificTF
inst_bed <- instances_specificTF[,c(2,3,4)]
instances_specificTF[,6]
inst_bed <- cbind(inst_bed, motifmatrix[1,1], instances_specificTF[,6], "+")
inst_bed[1,3]
inst_bed
inst_bed[,2]
View(inst_bed)
inst_bed[1,3]
motif_width
#region as wide as a motif
motif_width <- as.numeric(inst_bed[1,3]) - as.numeric(inst_bed[,2])
inst_bed[,2] <- as.numeric(inst_bed[,2]) + floor(motif_width/2)
inst_bed[,3] <- as.numeric(inst_bed[,2]) + 1
#inst_bed[,3] <- as.numeric(inst_bed[,3])#previous version of impact: +(windowsize-10)/2
#inst_bed[,2] <- as.numeric(inst_bed[,2])#previous version of impact: -(windowsize-10)/2
inst_bed <- unique(inst_bed)
colnames(inst_bed) <- c('chr','start','end','id','score','strand')
inst_bed_Granges <- with(inst_bed, GRanges(chr, IRanges(start,end), strand, score, id = id)) #instances Granges obj
motifmatrix[1,3]
get(motifmatrix[1,3])
inst_bed_Granges
int_1 <- intersect(inst_bed_Granges, get(motifmatrix[1,3]))
int_1
Granges_obj_mc
int_2 <- intersect(inst_bed_Granges, Granges_obj_mc)
int_2
ms_1 <- match(start(int_1)-1, inst_bed$start)
me_1 <- match(end(int_1), inst_bed$end)
a <- c(ms_1,me_1)
a <- unique(a[is.na(a) == F])
a
ms_1
me_1
ms_2 <- match(start(int_2)-1, inst_bed$start)
me_2 <- match(end(int_2), inst_bed$end)
b <- c(ms_2,me_2)
b <- unique(b[is.na(b) == F])
ab <- unique(c(a,b))
ab
if (length(ab) > 0){noChIP <- inst_bed[-ab,] #good negative peaks
}else{
noChIP <- inst_bed
}
noChIP
write.table(noChIP, glue("{OUTPUT_DIR}/{TF}_noChIP.txt"), sep = "\t", quote = F, row.names = FALSE, col.names = FALSE)
colnames(noChIP) <- c("seqnames","starts","ends","names","scores","strands")
#shuffle
s <- sample(seq(1,nrow(noChIP),1),nrow(noChIP),replace = F)
noChIP <- noChIP[s,]
noChIP <- unique(noChIP)
##clean up
if (length(which(noChIP$start < 0))){
noChIP$start[which(noChIP$start < 0)] <- 0
}
t <- noChIP[,3]-noChIP[,2]
w <- which(t %% 2 != 0) #odd
#shuffle
s <- sample(seq(1,nrow(noChIP),1),nrow(noChIP),replace = F)
noChIP <- noChIP[s,]
noChIP <- unique(noChIP)
##clean up
if (length(which(noChIP$start < 0))){
noChIP$start[which(noChIP$start < 0)] <- 0
}
t <- noChIP[,3]-noChIP[,2]
w <- which(t %% 2 != 0) #odd
if (length(w) > 0){noChIP[w,3] <- noChIP[w,3] + 1}
w1 <- which(noChIP$chr == "chrM")
w2 <- which(nchar(noChIP$chr) > 5)
if (length(c(w1,w2)) > 0){noChIP <- noChIP[-c(w1,w2),]}
write.table(noChIP, glue("{OUTPUT_DIR}/{TF}_train_test_negative_bed.txt"), sep = "\t", quote = F, row.names = FALSE, col.names = FALSE)
View(noChIP)
noChIP[, 'start']
noChIP[, 'starts']
tp <- read.table(glue("{OUTPUT_DIR}/{TF}_train_test_positive_bed.txt"))
View(tp)
tn <- read.table(glue("{OUTPUT_DIR}/{TF}_train_test_negative_bed.txt"))
View(tn)
View(tp)
expand_region <- function(dt, genome_size, both=128, left=NULL, right=NULL, create_granges=F, save_as_bed=T){
colnames(dt) <- c('chr','start','end','id','score','strand')
if(both){
left <- both
right <- both
}
dt[, 'start'] <- dt[, 'start'] - left
dt[, 'end'] <- dt[, 'end'] + right
return(head(dt, 5))
}
expand_region(tp)
expand_region(tp)$end - expand_region(tp)$start
expand_region <- function(dt, genome_size, both=128, left=NULL, right=NULL, create_granges=F, save_as_bed=T){
colnames(dt) <- c('chr','start','end','id','score','strand')
if(both){
left <- both/2
right <- both/2
}
dt[, 'start'] <- dt[, 'start'] - left
dt[, 'end'] <- dt[, 'end'] + right
return(head(dt, 5))
}
expand_region(tp)$end - expand_region(tp)$start
expand_region(tp)
gsize <- read.table(glue('{OUTPUT_DIR}/../data/hg10.sizes'))
OUTPUT_DIR
glue('{OUTPUT_DIR}/../data/hg10.sizes')
gsize <- read.table(glue('{OUTPUT_DIR}/../data/hg10.sizes'))
gsize <- read.table(glue('{INPUT_CHIP}/../hg10.sizes'))
gsize <- read.table(glue('{INPUT_CHIP}/../hg19.sizes'))
View(gsize)
dt <- tp
genome_size <- gsize
colnames(dt) <- c('chr','start','end','id','score','strand')
colnames(genome_size) <- c('chr', 'size')
if(both){
left <- both/2
right <- both/2
}
both=128
if(both){
left <- both/2
right <- both/2
}
left
right
dt[, 'start'] <- dt[, 'start'] - left
dt[, 'end'] <- dt[, 'end'] + right
genome_size$chr
each_chr <- 'chr1'
dt$chr == each_chr
dt[dt$chr == each_chr, ]
which_chr <- dt[dt$chr == each_chr, ]
genome_size$size[genome_size$chr == each_chr]
genome_size$size[genome_size$chr == each_chr, ]
which(which_chr$end > chr_size)
chr_size <- genome_size$size[genome_size$chr == each_chr]
which(which_chr$end > chr_size)
which_chr$end > chr_size
which_chr$end
which_chr
chr_size
which_chr[which_chr$end > chr_size, ]$end
which_chr[which_chr$end < chr_size, ]$end
expand_region(tp)
# check if any is greater than the chromosome size
#dt_split <- split(dt, f = dt[, 'chr'])
lapply(genome_size$chr, function(each_chr){
which_chr <- dt[dt$chr == each_chr, ]
chr_size <- genome_size$size[genome_size$chr == each_chr]
which_greater <- which(which_chr$end > chr_size)
if(length(which_greater) > 0){
which_chr[which_greater, ]$end <- chr_size
}
return(dt)
})
genome_size$chr
each_chr
which_chr <- dt[dt$chr == each_chr, ]
which_chr
# check if any is greater than the chromosome size
#dt_split <- split(dt, f = dt[, 'chr'])
lapply(genome_size$chr, function(each_chr){
which_chr <- dt[dt$chr == each_chr, ]
chr_size <- genome_size$size[genome_size$chr == each_chr]
which_greater <- which(which_chr$end > chr_size)
if(length(which_greater) > 0){
which_chr[which_greater, ]$end <- chr_size
}
return(which_chr)
})
expand_region <- function(dt, genome_size, both=128, left=NULL, right=NULL, create_granges=F, save_as_bed=T){
colnames(dt) <- c('chr','start','end','id','score','strand')
colnames(genome_size) <- c('chr', 'size')
if(both){
left <- both/2
right <- both/2
}
dt[, 'start'] <- dt[, 'start'] - left
dt[, 'end'] <- dt[, 'end'] + right
# check if any is greater than the chromosome size
#dt_split <- split(dt, f = dt[, 'chr'])
dt_list <- lapply(genome_size$chr, function(each_chr){
which_chr <- dt[dt$chr == each_chr, ]
chr_size <- genome_size$size[genome_size$chr == each_chr]
which_greater <- which(which_chr$end > chr_size)
if(length(which_greater) > 0){
which_chr[which_greater, ]$end <- chr_size
}
return(which_chr)
})
dt <- do.call(rbind, dt_list)
return(head(dt, 5))
}
expand_region(tp)$end
dt_list <- lapply(genome_size$chr, function(each_chr){
which_chr <- dt[dt$chr == each_chr, ]
chr_size <- genome_size$size[genome_size$chr == each_chr]
which_greater <- which(which_chr$end > chr_size)
if(length(which_greater) > 0){
which_chr[which_greater, ]$end <- chr_size
}
return(which_chr)
})
dt <- do.call(rbind, dt_list)
return(head(dt, 5))
head(dt, 5)
expand_region(tp)
genome_size
genome_size
gsize
expand_region(tp, gsize)
expand_region(tp, gsize)$end - expand_region(tp)$start
expand_region(tp, gsize)$end - expand_region(tp, gsize)$start
96143803 - 96096521
# extend both the TP and TN by
expand_region(tp, gsize, both = 393216)$end - expand_region(tp, gsize, BOTH=393216)$start
# extend both the TP and TN by
expand_region(tp, gsize, both = 393216)$end - expand_region(tp, gsize, both =393216)$start
expand_region(tp, gsize, both = 393216)
132605120 - 132605118
132605120 + 132605118
(132605120 + 132605118)/2
expand_region <- function(dt, genome_size, both=128, left=NULL, right=NULL, create_granges=F, save_as_bed=T){
colnames(dt) <- c('chr','start','end','id','score','strand')
colnames(genome_size) <- c('chr', 'size')
if(both){
left <- both/2
right <- both/2
}
center <- (dt[, 'start'] + dt[, 'end'])/2
dt[, 'start'] <- center - left
dt[, 'end'] <- center + right
# check if any is greater than the chromosome size
#dt_split <- split(dt, f = dt[, 'chr'])
dt_list <- lapply(genome_size$chr, function(each_chr){
which_chr <- dt[dt$chr == each_chr, ]
chr_size <- genome_size$size[genome_size$chr == each_chr]
which_greater <- which(which_chr$end > chr_size)
if(length(which_greater) > 0){
which_chr[which_greater, ]$end <- chr_size
}
return(which_chr)
})
dt <- do.call(rbind, dt_list)
return(head(dt, 5))
}
# extend both the TP and TN by
expand_region(tp, gsize, both = 393216)$end - expand_region(tp, gsize, both = 393216)$start
expand_region(tp, gsize, both = 393216)
393216/2
# extend both the TP and TN by
expand_region(tp, gsize, both = 393216)$end - expand_region(tp, gsize, both = 393216)$start
cbind(expand_region(tp, gsize, both = 393216), set='TP')
# extend both the TP and TN by
tp_dt <- cbind(expand_region(tp, gsize, both = 393216), set='TP')
tn_dt <- cbind(expand_region(tn, gsize, both = 393216), set='TN')
dt <- rbind(tp_dt, tn_dt)
View(dt)
expand_region <- function(dt, genome_size, both=128, left=NULL, right=NULL, create_granges=F, save_as_bed=T){
colnames(dt) <- c('chr','start','end','id','score','strand')
colnames(genome_size) <- c('chr', 'size')
if(both){
left <- both/2
right <- both/2
}
center <- (dt[, 'start'] + dt[, 'end'])/2
dt[, 'start'] <- center - left
dt[, 'end'] <- center + right
# check if any is greater than the chromosome size
#dt_split <- split(dt, f = dt[, 'chr'])
dt_list <- lapply(genome_size$chr, function(each_chr){
which_chr <- dt[dt$chr == each_chr, ]
chr_size <- genome_size$size[genome_size$chr == each_chr]
which_greater <- which(which_chr$end > chr_size)
if(length(which_greater) > 0){
which_chr[which_greater, ]$end <- chr_size
}
return(which_chr)
})
dt <- do.call(rbind, dt_list)
return(dt)
}
# extend both the TP and TN by
tp_dt <- cbind(expand_region(tp, gsize, both = 393216), set='TP')
tn_dt <- cbind(expand_region(tn, gsize, both = 393216), set='TN')
dt <- rbind(tp_dt, tn_dt)
View(dt)
write.table(x=dt, file=glue('{TF}_motif_regions.txt'), quote = F, row.names = F)
write.table(x=dt, file=glue('{OUTPUT_DIR}/{TF}_motif_regions.txt'), quote = F, row.names = F)
View(inst_bed)
write.table(x=dt, file=glue('{OUTPUT_DIR}/{TF}_motif_regions.txt'), quote = F, row.names = F,col.names = NA)
write.table(x=dt, file=glue('{OUTPUT_DIR}/{TF}_motif_regions.txt'), quote = F, row.names = F, col.names = F)
dt <- cbind(dt pos=1:nrow(dt))
dt <- cbind(dt, pos=1:nrow(dt))
write.table(x=dt, file=glue('{OUTPUT_DIR}/{TF}_motif_regions.txt'), quote = F, row.names = F, col.names = F)
20851231461 - 227569740
write.table(x=dt[1:5, ], file=glue('{OUTPUT_DIR}/{TF}_motif_regions_TEMP.txt'), quote = F, row.names = F, col.names = F)
write.table(x=rbind(dt[1:5, ], tail(dt, 5)), file=glue('{OUTPUT_DIR}/{TF}_motif_regions_TEMP.txt'), quote = F, row.names = F, col.names = F)
rstudioapi::getActiveDocumentContext()$path |> dirname() |> setwd()
rstudioapi::getActiveDocumentContext()$path |> dirname() |> setwd()
rm(list=ls())
library(glue)
library(GenomicRanges)
# ARGUMENTS
make_motifs <- T
TF <- 'Gata3'
cell_type <- 'Th2'
# directories
INPUT_CHIP <- '../data/input_chip_data'
OUTPUT_DIR <- '../processed-data'
REPRO_DIR <- '../../../projects-reproduce/IMPACT-repro/reproducing'
HOMER_DIR <- '../../../software/homer'
# check if files are available ==============
if(!dir.exists(INPUT_CHIP)){
dir.create(path=INPUT_CHIP, recursive = T)
} else {
print(glue('The directory ({INPUT_CHIP}) exists.'))
}
# download the files =======
if(!file.exists(glue('{INPUT_CHIP}/Input_{TF}_1.bed.gz'))){
download.file(url=glue('https://github.com/immunogenomics/IMPACT/raw/master/Training/Input_{TF}_1.bed.gz'),
destfile = glue('{INPUT_CHIP}/Input_{TF}_1.bed.gz'))
}
if(!file.exists(glue('{INPUT_CHIP}/Input_{TF}_2.bed.gz'))){
download.file(url='https://github.com/immunogenomics/IMPACT/raw/master/Training/Input_{TF}_2.bed.gz',
destfile = glue('{INPUT_CHIP}/Input_{TF}_2.bed.gz'))
}
TF_num <- c('Gata3_1')
chip_data <- lapply(TF_num, function(each_tf){
data.table::fread(glue('{INPUT_CHIP}/Input_{each_tf}.bed.gz'))
})
View(chip_data)
# prepare the chip inputs = mostly gotten from the IMPACT code itself on github
#Input ChIP
chip_data <- do.call(rbind, chip_data)[, 1:3]
View(chip_data)
motif <- base::paste(TF, cell_type, sep = '_')
chip_bed <- unique(cbind(chip_data[,1:3], 0, motif, "+"))
chip_bed[,4] <- paste0("peak", seq(1, nrow(chip_bed), 1))
colnames(chip_bed) <- c('chr','start','end','id','score','strand') #score may be number of reads
bed_Granges <- with(chip_bed, GRanges(chr, IRanges(start,end), strand, score, id = id))
bed_Granges <- reduce(bed_Granges)
chip_bed <- cbind(as.character(seqnames(bed_Granges)), start(bed_Granges), end(bed_Granges), paste0("peak",seq(1,length(bed_Granges),1)),0, "+")
write.table(chip_bed, glue('{OUTPUT_DIR}/{TF}_train_df.txt'), sep = "\t", quote = F, row.names = FALSE, col.names = FALSE)
# the motif
motif_pwm <- read.table(glue("{REPRO_DIR}/Motifs/Motif_{motif}.txt"), sep = "\t", header = F, stringsAsFactors = FALSE)
write.table(motif_pwm, glue('{OUTPUT_DIR}/{TF}_1_PWM.txt'), sep = "\t", quote = F, row.names = FALSE, col.names = FALSE)
#Input Motifs
MotifThreshvals <- motif_pwm[which(motif_pwm[,4]=="PH"), 3]
MotifThreshnames <- motif_pwm[which(motif_pwm[,4]=="PH"), 2]
MotifThreshinfo <- cbind(MotifThreshnames, MotifThreshvals)
write.table(motif_pwm, glue("{OUTPUT_DIR}/{TF}_All_PWM.txt"), sep = "\t", quote = F, row.names = FALSE, col.names = FALSE)
write.table(MotifThreshinfo, glue("{OUTPUT_DIR}/{TF}_MotifThresholdList.txt"), sep = "\t", quote = F, row.names = FALSE, col.names = FALSE)
if(!file.exists(glue('{OUTPUT_DIR}/{TF}_ALL_PWM.motif'))){
if(file.exists((glue('{OUTPUT_DIR}/{TF}_ALL_PWM.txt')))){
system(glue('cp {OUTPUT_DIR}/{TF}_ALL_PWM.txt {OUTPUT_DIR}/{TF}_ALL_PWM.motif'))
} else {
stop('Position weighted matrix not in folder.')
}
}
# find instances of the motifs by using HOMER
print('Finding instances...')
system(glue('perl {HOMER_DIR}/bin/findMotifsGenome.pl {OUTPUT_DIR}/{TF}_train_df.txt {HOMER_DIR}/data/genomes/hg19/ homer_output/ -size given -find {OUTPUT_DIR}/{TF}_ALL_PWM.motif > {OUTPUT_DIR}/{TF}_findinstances.txt'))
system(glue('perl {HOMER_DIR}/bin/findMotifsGenome.pl {OUTPUT_DIR}/{TF}_train_df.txt {HOMER_DIR}/data/genomes/hg19/ homer_output/ -size given -find {OUTPUT_DIR}/{TF}_ALL_PWM.motif > {OUTPUT_DIR}/{TF}_findinstances.txt'))
glue('perl {HOMER_DIR}/bin/findMotifsGenome.pl {OUTPUT_DIR}/{TF}_train_df.txt {HOMER_DIR}/data/genomes/hg19/ homer_output/ -size given -find {OUTPUT_DIR}/{TF}_ALL_PWM.motif > {OUTPUT_DIR}/{TF}_findinstances.txt')
system(glue('perl {HOMER_DIR}/bin/findMotifsGenome.pl {OUTPUT_DIR}/{TF}_train_df.txt {HOMER_DIR}/data/genomes/hg19/ homer_output/ -size given -find {OUTPUT_DIR}/{TF}_ALL_PWM.motif > {OUTPUT_DIR}/{TF}_findinstances.txt'))
# find instances of the motifs by using HOMER
print('Finding instances...')
system(glue('perl {HOMER_DIR}/bin/findMotifsGenome.pl {OUTPUT_DIR}/{TF}_train_df.txt {HOMER_DIR}/data/genomes/hg19/ homer_output/ -size given -find {OUTPUT_DIR}/{TF}_ALL_PWM.motif > {OUTPUT_DIR}/{TF}_findinstances.txt'))
HOMER_DIR
getwd()
# find instances of the motifs by using HOMER
print('Finding instances...')
system(glue('perl {HOMER_DIR}/bin/findMotifsGenome.pl {OUTPUT_DIR}/{TF}_train_df.txt {HOMER_DIR}/data/genomes/hg19/ homer_output/ -size given -find {OUTPUT_DIR}/{TF}_ALL_PWM.motif > {OUTPUT_DIR}/{TF}_findinstances.txt'))
setwd('/project2/haky/temi/projects/TFXcan/scripts/')
tp <- read.table(glue("{OUTPUT_DIR}/{TF}_train_test_positive_bed.txt"))
tn <- read.table(glue("{OUTPUT_DIR}/{TF}_train_test_negative_bed.txt"))
gsize <- read.table(glue('{INPUT_CHIP}/../hg19.sizes'))
expand_region <- function(dt, genome_size, both=128, left=NULL, right=NULL, create_granges=F, save_as_bed=T){
colnames(dt) <- c('chr','start','end','id','score','strand')
colnames(genome_size) <- c('chr', 'size')
if(both){
left <- both/2
right <- both/2
}
center <- (dt[, 'start'] + dt[, 'end'])/2
dt[, 'start'] <- center - left
dt[, 'end'] <- center + right
# check if any is greater than the chromosome size
#dt_split <- split(dt, f = dt[, 'chr'])
dt_list <- lapply(genome_size$chr, function(each_chr){
which_chr <- dt[dt$chr == each_chr, ]
chr_size <- genome_size$size[genome_size$chr == each_chr]
which_greater <- which(which_chr$end > chr_size)
if(length(which_greater) > 0){
which_chr[which_greater, ]$end <- chr_size
}
return(which_chr)
})
dt <- do.call(rbind, dt_list)
return(dt)
}
# extend both the TP and TN by
tp_dt <- cbind(expand_region(tp, gsize, both = 393216), set='TP')
tn_dt <- cbind(expand_region(tn, gsize, both = 393216), set='TN')
dt <- rbind(tp_dt, tn_dt)
dt <- cbind(dt, pos=1:nrow(dt))
write.table(x=dt, file=glue('{OUTPUT_DIR}/{TF}_motif_regions.txt'), quote = F, row.names = F, col.names = F)
write.table(x=rbind(dt[1:5, ], tail(dt, 5)), file=glue('{OUTPUT_DIR}/{TF}_motif_regions_TEMP.txt'), quote = F, row.names = F, col.names = F)
View(dt)
